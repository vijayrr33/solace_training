{"version":3,"file":"solclient.js","mappings":"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2BAC/BC,GACE,EAAQ,OACN,wBACJC,EAAuB,gBACvBC,EAAe,gBACfC,EAAe,qBACfC,EAAoB,iBACpBC,EAAgB,gBAChBC,EAAe,UACfC,GACE,EAAQ,OACN,SACJC,EAAQ,aACRC,EAAY,gBACZC,EAAe,mBACfC,EAAkB,yBAClBC,EAAwB,qBACxBC,GACE,EAAQ,OACN,qBACJC,EAAoB,eACpBC,EAAc,gBACdC,EAAe,uBACfC,GAAsB,QACtBrD,GAAO,aACPsD,GAAY,mBACZC,GAAkB,iBAClBC,GAAgB,kBAChBC,GAAiB,aACjBC,GAAY,aACZC,IACE,EAAQ,OACN,YACJC,GAAW,oBACXC,GAAmB,mBACnBC,GAAkB,gBAClBC,GAAe,mBACfC,GAAkB,aAClBC,GAAY,uBACZC,IACE,EAAQ,OACN,SACJC,IACE,EAAQ,OACN,eACJC,GAAc,kBACdC,IACE,EAAQ,OACN,QACJC,IACE,EAAQ,MAYNC,GAAS,CACblC,0BACAa,uBACAU,eACAC,uBACAC,sBACAC,mBACAC,sBACAC,gBACAC,0BACAf,iBACAlC,iBACAzB,cACAmB,kBACApG,eACA2G,UACAC,WACA1J,OACAoI,UACAuB,qBACAM,kBACAC,iCACAC,2BACAC,4BACAR,0BACAC,kBACAa,kCACAC,6BACAgB,kBACA7B,cACAC,qBACA6B,0BACAxC,sBACArG,iBACA8H,kBACAR,eACAC,wBACAC,yBACAO,kBACAC,uBACAC,mBACAC,kBACAC,YACAV,sBAMAC,+BACAT,4BACAX,eACAC,mBACA6B,WACAC,eACAC,kBACAC,qBACAC,2BACAC,uBACAjD,WACAsD,gBACAC,sBACAC,oBACAC,qBACAC,gBACAlD,mBACAC,2BACAC,6BACAiD,gBACAQ,YACAvD,QACAwD,kBACAC,qBACAC,WAEAtD,eAEAwD,UArFgB,EAAQ,OAwF1BC,OAAOC,OAAOvN,EAAOC,QAASmN,oBCzN9B,MAAM,MAAEhF,GAAU,EAAQ,MAE1BpI,EAAOC,QAAQmI,MAAQA,kBCCvB,MAAMoF,EAAgB,MACpB,MAAMC,EAAM,GACZ,IAAK,IAAI3G,EAAI,EAAGA,EAA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G,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAA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","sources":["webpack://solclientjs/./index.js","webpack://solclientjs/./modules/solclient-convert/api.js","webpack://solclientjs/./modules/solclient-convert/lib/base64.js","webpack://solclientjs/./modules/solclient-convert/lib/bits.js","webpack://solclientjs/./modules/solclient-convert/lib/convert.js","webpack://solclientjs/./modules/solclient-convert/lib/hex.js","webpack://solclientjs/./modules/solclient-convert/lib/long.js","webpack://solclientjs/./modules/solclient-core/api-internal.js","webpack://solclientjs/./modules/solclient-core/api.js","webpack://solclientjs/./modules/solclient-debug/api.js","webpack://solclientjs/./modules/solclient-debug/lib/debug.js","webpack://solclientjs/./modules/solclient-destination/api.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-from-network.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-type.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-util.js","webpack://solclientjs/./modules/solclient-destination/lib/destination.js","webpack://solclientjs/./modules/solclient-destination/lib/queue.js","webpack://solclientjs/./modules/solclient-destination/lib/subscription-info.js","webpack://solclientjs/./modules/solclient-destination/lib/topic.js","webpack://solclientjs/./modules/solclient-env/api.js","webpack://solclientjs/./modules/solclient-error/api.js","webpack://solclientjs/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solclientjs/./modules/solclient-error/lib/error-subcodes.js","webpack://solclientjs/./modules/solclient-error/lib/not-implemented-error.js","webpack://solclientjs/./modules/solclient-error/lib/operation-error.js","webpack://solclientjs/./modules/solclient-error/lib/request-error.js","webpack://solclientjs/./modules/solclient-error/lib/request-event-codes.js","webpack://solclientjs/./modules/solclient-error/lib/solace-error.js","webpack://solclientjs/./modules/solclient-eskit/api.js","webpack://solclientjs/./modules/solclient-eskit/lib/array-operations.js","webpack://solclientjs/./modules/solclient-eskit/lib/assert.js","webpack://solclientjs/./modules/solclient-eskit/lib/bidi-map.js","webpack://solclientjs/./modules/solclient-eskit/lib/enum.js","webpack://solclientjs/./modules/solclient-eskit/lib/iterator.js","webpack://solclientjs/./modules/solclient-eskit/lib/lazy.js","webpack://solclientjs/./modules/solclient-eskit/lib/make-map.js","webpack://solclientjs/./modules/solclient-eskit/lib/mixin.js","webpack://solclientjs/./modules/solclient-eskit/lib/resolver.js","webpack://solclientjs/./modules/solclient-eskit/lib/set-operations.js","webpack://solclientjs/./modules/solclient-events/api.js","webpack://solclientjs/./modules/solclient-events/lib/event-emitter.js","webpack://solclientjs/./modules/solclient-events/lib/timer.js","webpack://solclientjs/./modules/solclient-factory/api.js","webpack://solclientjs/./modules/solclient-factory/lib/profile-binding.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory.js","webpack://solclientjs/./modules/solclient-flow/api.js","webpack://solclientjs/./modules/solclient-flow/lib/flow-operation.js","webpack://solclientjs/./modules/solclient-flow/lib/flow.js","webpack://solclientjs/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solclientjs/./modules/solclient-fsm/api.js","webpack://solclientjs/./modules/solclient-fsm/lib/entry-point.js","webpack://solclientjs/./modules/solclient-fsm/lib/event.js","webpack://solclientjs/./modules/solclient-fsm/lib/exit-point.js","webpack://solclientjs/./modules/solclient-fsm/lib/object.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-context.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-machine.js","webpack://solclientjs/./modules/solclient-fsm/lib/state.js","webpack://solclientjs/./modules/solclient-log/api.js","webpack://solclientjs/./modules/solclient-log/lib/console-log-impl.js","webpack://solclientjs/./modules/solclient-log/lib/global-binding.js","webpack://solclientjs/./modules/solclient-log/lib/log-impl.js","webpack://solclientjs/./modules/solclient-log/lib/log-levels.js","webpack://solclientjs/./modules/solclient-message-consumer/api.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solclientjs/./modules/solclient-message-publisher/api.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solclientjs/./modules/solclient-message/api.js","webpack://solclientjs/./modules/solclient-message/lib/message-cache-status.js","webpack://solclientjs/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-flags.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-util.js","webpack://solclientjs/./modules/solclient-message/lib/message-types.js","webpack://solclientjs/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solclientjs/./modules/solclient-message/lib/message.js","webpack://solclientjs/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solclientjs/./modules/solclient-queue/api.js","webpack://solclientjs/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-access-types.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-permissions.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-types.js","webpack://solclientjs/./modules/solclient-replaystart/api.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solclientjs/./modules/solclient-sdt/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solclientjs/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solclientjs/./modules/solclient-session/api.js","webpack://solclientjs/./modules/solclient-session/lib/authentication-schemes.js","webpack://solclientjs/./modules/solclient-session/lib/capability-types.js","webpack://solclientjs/./modules/solclient-session/lib/correlated-request.js","webpack://solclientjs/./modules/solclient-session/lib/default-capabilities.js","webpack://solclientjs/./modules/solclient-session/lib/global-context.js","webpack://solclientjs/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solclientjs/./modules/solclient-session/lib/host-list.js","webpack://solclientjs/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solclientjs/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solclientjs/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solclientjs/./modules/solclient-session/lib/p2p-util.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-codes.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-names.js","webpack://solclientjs/./modules/solclient-session/lib/session-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-fsm-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-fsm.js","webpack://solclientjs/./modules/solclient-session/lib/session-operations.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties-validator.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties.js","webpack://solclientjs/./modules/solclient-session/lib/session-request-types.js","webpack://solclientjs/./modules/solclient-session/lib/session-state-names.js","webpack://solclientjs/./modules/solclient-session/lib/session-states.js","webpack://solclientjs/./modules/solclient-session/lib/session.js","webpack://solclientjs/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solclientjs/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solclientjs/./modules/solclient-smf/api.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/api.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/decode.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/encode.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/smp.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/transport.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/api.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-protocols.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solclientjs/./modules/solclient-solcache-session/api.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solclientjs/./modules/solclient-stats/api.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-bymode.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-types.js","webpack://solclientjs/./modules/solclient-stats/lib/stats.js","webpack://solclientjs/./modules/solclient-transport/api.js","webpack://solclientjs/./modules/solclient-transport/lib/base-smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-queue.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/node-tls-opts-mixin.js","webpack://solclientjs/./modules/solclient-transport/lib/smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/api.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/shuntable-transport.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-compression.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-plaintext.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-tls.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tls.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-base.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-error.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-factory.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocols.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-states.js","webpack://solclientjs/./modules/solclient-transport/lib/tsh-state.js","webpack://solclientjs/./modules/solclient-transport/lib/web/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-base64.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solclientjs/./modules/solclient-util/api.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties-validators.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties.js","webpack://solclientjs/./modules/solclient-util/lib/array-utils.js","webpack://solclientjs/./modules/solclient-util/lib/clone.js","webpack://solclientjs/./modules/solclient-util/lib/process.js","webpack://solclientjs/./modules/solclient-util/lib/string-buffer.js","webpack://solclientjs/./modules/solclient-util/lib/string-utils.js","webpack://solclientjs/./modules/solclient-util/lib/timing-bucket.js","webpack://solclientjs/./modules/solclient-util/lib/url.js","webpack://solclientjs/./modules/solclient-util/lib/uuid.js","webpack://solclientjs/./modules/solclient-util/lib/version.js","webpack://solclientjs/./modules/solclient-validate/api.js","webpack://solclientjs/./modules/solclient-validate/lib/base-checks.js","webpack://solclientjs/./modules/solclient-validate/lib/check.js","webpack://solclientjs/./modules/solclient-validate/lib/parameter.js","webpack://solclientjs/./node_modules/ws/index.js","webpack://solclientjs/./node_modules/ws/lib/buffer-util.js","webpack://solclientjs/./node_modules/ws/lib/constants.js","webpack://solclientjs/./node_modules/ws/lib/event-target.js","webpack://solclientjs/./node_modules/ws/lib/extension.js","webpack://solclientjs/./node_modules/ws/lib/limiter.js","webpack://solclientjs/./node_modules/ws/lib/permessage-deflate.js","webpack://solclientjs/./node_modules/ws/lib/receiver.js","webpack://solclientjs/./node_modules/ws/lib/sender.js","webpack://solclientjs/./node_modules/ws/lib/stream.js","webpack://solclientjs/./node_modules/ws/lib/subprotocol.js","webpack://solclientjs/./node_modules/ws/lib/validation.js","webpack://solclientjs/./node_modules/ws/lib/websocket-server.js","webpack://solclientjs/./node_modules/ws/lib/websocket.js","webpack://solclientjs/external commonjs2 \"bufferutil\"","webpack://solclientjs/external commonjs2 \"utf-8-validate\"","webpack://solclientjs/external node-commonjs \"buffer\"","webpack://solclientjs/external node-commonjs \"constants\"","webpack://solclientjs/external node-commonjs \"crypto\"","webpack://solclientjs/external node-commonjs \"dns\"","webpack://solclientjs/external node-commonjs \"events\"","webpack://solclientjs/external node-commonjs \"fs\"","webpack://solclientjs/external node-commonjs \"http\"","webpack://solclientjs/external node-commonjs \"https\"","webpack://solclientjs/external node-commonjs \"net\"","webpack://solclientjs/external node-commonjs \"os\"","webpack://solclientjs/external node-commonjs \"stream\"","webpack://solclientjs/external node-commonjs \"tls\"","webpack://solclientjs/external node-commonjs \"url\"","webpack://solclientjs/external node-commonjs \"util\"","webpack://solclientjs/external node-commonjs \"zlib\"","webpack://solclientjs/./node_modules/long/umd/index.js","webpack://solclientjs/webpack/bootstrap","webpack://solclientjs/webpack/startup"],"sourcesContent":["// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  stringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","module.exports.Long = require('long');\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    // 'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on anonymous queue', SC.REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED,\n    'replay not supported on anonymous queue without subscriptions', SC.REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'browsing not supported on partitioned queue', SC.PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED,\n    'selectors not supported on partitioned queue', SC.PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'sync replication ineligible', SC.SYNC_REPLICATION_INELIGIBLE\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to a non-durable Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   * @deprecated since 10.3.1 - Replay is now supported on Temp Endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT:         160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                                161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                               162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                                 163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                           164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                             165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:                    166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                           167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                                    168,\n  /**\n   * Replay is not supported on anonymous queue\n   * - 403 Replay Not Supported on Anonymous Queue\n   */\n  REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED:                         169,\n  /**\n   * Browser flows to Partitioned Queues are not permitted.\n   * - 403 Browsing Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED:                     170,\n  /**\n   * Egress selectors are not permitted when binding to a Partitioned Queue.\n   * - 403 Selectors Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED:                    171,\n  /**\n   * Replay Not Supported on Anonymous Queue Without Subscriptions\n   * - 403 Replay Not Supported on Anonymous Queue Without Subscriptions\n   */\n  REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED:   172,\n  /**\n   * The message was rejected because the appliance has been configured\n   * to reject messages when sync replication mode is ineligible.\n   * - 503 Sync Replication Ineligible (Reject Messages when Synchronous Replication Mode is Ineligible)\n   * \n   * * The transaction was started as a synchronous replicated transaction,\n   * but replication became ineligible during the transaction.\n   * - 503 Sync Replication Ineligible (Replication Ineligible during Synchronous Replicated Transaction)\n   */\n  SYNC_REPLICATION_INELIGIBLE:                                  173,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import Long = require('long');\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns `true` if this Guaranteed Message Consumer was disposed.\n   * @readonly\n   * @type {Boolean}\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnected;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum, assert } = require('solclient-eskit');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @private\n   */\n  updateAckState(id, state) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats } = require('solclient-stats');\nconst { StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT);\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is  unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state and partition group ID, if any');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        // the partition group ID\n        let partitionGroupIdValue = msg.getPartitionGroupId();\n        if(partitionGroupIdValue == undefined || partitionGroupIdValue == null) {\n          partitionGroupIdValue = undefined; // set it as undefined\n          fsm._clearPartitionGroupId(); // clear the partitionGroupId\n        }\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n          partitionGroupId:     partitionGroupIdValue,\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n          partitionGroupId:     partitionGroupIdValue,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return this.transitionTo(fsm.Reconnecting.RBindSent);\n    })\n    ;\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emitting UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emitting UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          this._sendAck([[messageID, messageID]]);\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n    this._consumer.incStat(StatType.RX_ACKED);\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      this._sendAck([[messageId, messageId]]);\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT);\n    this._setTransportAckTimer();\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _clearPartitionGroupId() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Clear the consumer.partitionGroupId; Set it to undefined');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n\n    LOG_TRACE('Initializing partitionGroupId');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Array.<ackpair>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      currentRange.push(applicationAck);\n      return; // Wait for end of range or flush\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range.\n    if (currentRange.length) {\n      ackRanges.push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n    if (applicationAck === null ||\n        ackRanges.length === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n      // Reduce each range to a first and last ID.\n      const bareRanges = ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n\n      if (bareRanges.length || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n        this._sendAck(bareRanges);\n        // Warning: this log statement reduces debug performance by 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks: ${bareRanges.length\n            ? bareRanges.map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      ackRanges.forEach((ackRange) => {\n        ackRange.forEach((ack) => {\n          if (ack.state !== ApplicationAckState.ACKED_SENT) {\n            try {\n              this._applicationAcks.updateAckState(ack.id,\n                                                   ApplicationAckState.ACKED_SENT);\n            } catch (e) {\n              const { LOG_ERROR } = this.logger;\n              LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n            }\n          }\n        });\n      });\n\n      // Clear the main accumulator since it has hit the wire.\n      acksPendingState.ackRanges = [];\n    }\n    // Clear the accumulator for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [],\n      currentRange:      [],\n    };\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    assert(acksPendingState.ackRanges.length === 0);\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   * @default null\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.activeIndicationEnabled &&\n      instance.queueDescriptor.type !== QueueType.QUEUE) {\n      throw new OperationError(\n        `${prefix} validation: activeIndicationEnabled may only be true for ` +\n        'QUEUE destinations',\n        ErrorSubcode.PARAMETER_CONFLICT\n      );\n    }\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties|null|undefined}\n   * @default undefined\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n    this.partitionGroupId = undefined; // support Partition Q feature\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @internal\n   */\n  applicationAck(messageId) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message.acknowledge(); // No, so ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(/*message*/ /*, flags*/) {\n    return ['HTTP Content Type', false, undefined, null];\n  },\n\n  fpHttpContentEncoding(/*message*/ /*, flags*/) {\n    return ['HTTP Content Encoding', false, undefined, null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (Long.isLong(cacheRequestId)) {\n      return ['Cache Request Id', true, cacheRequestId.toString, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const { clone } = require('solclient-util'); // using the modified local clone version\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; //Makes the accessor throw, never returned to user.\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n */\nclass Message {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {Uint8Array|String|null} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {Uint8Array|ArrayBufferLike|DataView|String|null|undefined} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {String|null|undefined} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object|String|null|undefined} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {Number|undefined} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   *\n   * @returns {Number|undefined} The delivery count reported by the broker.\n   * @throws {solace.OperationError} if endpoint does not report delivery count (message is not persistent).\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n  /**\n   * Acknowledges this message.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    this._consumer.applicationAck(this._guaranteedMsgId);\n    this._acked = true;\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n}\n\n/**\n * A standard property key that clients should use if they want to\n * group messages into different queue partitions.\n * Expected value is UTF-8 encoded up to 255 bytes long string.\n */\nMessage.SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY = 'JMSXGroupID';\n\nmodule.exports.Message = Message;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} [queueSpec.name=null] The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName() || ''}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object.  Upon creation of a queue, undefined queue\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : 'undefined',\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n *@private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * <b>Deprecated</b> If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   * @deprecated since broker v9.10.0.12\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n  /**\n   * Indicates whether a client supports Partitioned Queues\n   * and whether a PartitionGroupId will be proccessed in a BindResponse message.\n   * Always true\n   * \n   * @since 10.12.0\n   */\n   PQ: 2,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     * @default null\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        // clear connectTimer, if it is still running\n        fsm.clearConnectTimer();\n\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.clearConnectTimer(); // clear connectTimer, while destroying the transport\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        fsm.clearConnectTimer(); // clear connectTimer, once we successfully connect\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the consumer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const consumerProperties = consumer.getProperties();\n    if (consumerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(consumerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisisted.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      //TODO: act on this.\n      // (throw.)\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supported.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'tlsv1',\n  'tlsv1.1',\n  'tlsv1.2',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @default null\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @default null\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description An array of TLS protocols to be excluded when negotiating which protocol\n   * to use.\n   *  * Allowed values are: TLSv1, TLSv1.1, TLSv1.2\n   *  * Note: when a protocol version is excluded without excluding all of its\n   *    previous protocol versions, the effect is to also exclude all subsequent\n   *    protocol versions.\n   * @default null\n   * @target node\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'sslExcludedProtocols':     this.sslExcludedProtocols,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties|null|undefined}\n   * @default undefined\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for SSL connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using SSL connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using SSL connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor,\n        QueueType } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    this.validateAndSendMessage(message);\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   * <br>\n   * <strong>Note:</strong>\n   * The API sets the correlationId and replyTo fields of the message being sent;\n   * this overwrites any existing correlationId and replyTo values on the message.\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(18)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n      case SMFLib.SMFAdProtocolParam.PARTITION_GROUP_ID:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue();\n          const uh = param.getUh();\n          const type = param.getType();\n          for (let i = 0; i < ranges.length; ++i) {\n            const range = ranges[i];\n            paramspace.push(encAdp64AckPairParam(uh,\n                                                 type,\n                                                 range[0],\n                                                 range[1]));\n          }\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    const preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    addContentElementToArrays(csumm, payload,\n                              message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // not useful API->router\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (length < 253) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (length < 256 * 256 - 4) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          smfHeader.pm_ad_publisher_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                       dataBuf.readUInt32BE(pos),\n                                                       true);\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The partitionGroupId, if present\n   */\n  getPartitionGroupId() {\n    return this._readParameter(SMFAdProtocolParam.PARTITION_GROUP_ID,\n                               strToInt16, bUInt16BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      queueDescriptor.durable // better be...\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   *  @param {Long} [partitionGroupId=undefined] Partition Group ID for support of\n   *          Partition Queue feature, associate new flow with the same\n   *          PartitionGroupId as an old flow (e.g due to a reconnect).\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined,\n                                partitionGroupId = undefined) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    // support for PartitionGroupId. Only send when not null and undefined\n    if (partitionGroupId !== undefined && partitionGroupId !== null) {\n      // [AssuredCtrl PartitionGroupId Parameter]    ***\n      LOG_TRACE(`Adding partitionGroupId to message: ${partitionGroupId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.PARTITION_GROUP_ID,\n        partitionGroupId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Array.<Array.<Long>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `[ [singleMessageId, singleMessageId] ]`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && applicationAckRanges.length) {\n      if (applicationAckRanges.length > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n  [ClientCapabilityType.PQ, 0x20],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID, ClientCapabilityType.PQ]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n  PARTITION_GROUP_ID:                      0x38,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n  PARTITION_KEY_HASH:       0x35, // @Todo: not yet implemented as improvement for PQ\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    return this._correlationCounter;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","const fs = require('fs');\nconst SolclientSessionLib = require('solclient-session');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\n/**\n * Node TLS socket option generation factored out from WS transport, shared with Tcp transport.\n * Internal mixin class, not intended to be publicly visible.\n * @private\n */\n\nclass NodeTLSOptsMixin {\n  /**\n   * Overwrite Node.js default hostname check callback by verifying cnNameList against subject CN\n   * in the server certificate. If cnNameList is a empty string, it means all CNs are acceptable.\n   * @param {String} host The hostname for checking\n   * @param {String} cert The server certificate for checking\n   * @name solace.WebTransportSession#checkCertificateCNs\n   * @returns {?Error} Any error generated by the certificate check\n   * @private\n   */\n  checkCertificateCNs(host, cert) {\n    if (this._props.sslTrustedCommonNameList && this._props.sslTrustedCommonNameList.length > 0) {\n      // no Closure Compiler externs for certificates\n      LOG_DEBUG('server cert:', cert);\n      const subject = cert['subject']; // eslint-disable-line dot-notation\n      let valid = false;\n      if (subject) {\n        const cn = subject['CN']; // eslint-disable-line dot-notation\n        valid = this._props.sslTrustedCommonNameList.some(name =>\n          name.toLowerCase() === cn.toLowerCase()\n        );\n      }\n      if (!valid) {\n        const error = new Error('Server certificate not trusted - no common name match');\n        error.reason = 'Server certificate not trusted - no common name match';\n        error.host = host;\n        error.cert = cert;\n        return error;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Create the TLS options object used in wss:// and tcps:// connection establishment.\n   * The same options are needed by the ws and tls socket constructors.\n   * @returns {Object} WebSocket/TLSSocket options object\n   * @private\n   */\n  createTLSOptions() {\n    /* eslint-disable dot-notation */\n    const props = this._props;\n    const options = {};\n    const useClientCert = (\n      props.authenticationScheme === SolclientSessionLib.AuthenticationScheme.CLIENT_CERTIFICATE\n    );\n\n    // available tls options:\n    //  pfx, key, passphrase, cert, ca, ciphers, rejectUnauthorized,\n    //  secureProtocol, secureOptions, checkServerIdentity\n\n    // default to allow all version of SSL during negotiation but exclude SSLv2 and SSLv3\n    options['secureProtocol'] = 'SSLv23_method';\n    const constMap = SolclientSessionLib.SessionProperties.SslProtocolExcludeConstantMap;\n    options['secureOptions'] = constMap['sslv2'] | constMap['sslv3'];\n    (props.sslExcludedProtocols || []).forEach((protocol) => {\n      options['secureOptions'] |= constMap[protocol.toLowerCase()];\n    });\n\n    if (props.sslCipherSuites) {\n      const ciphers = props.sslCipherSuites.split(',');\n      const trimmed = ciphers.map(cipher => cipher.trim());\n      options['ciphers'] = trimmed.join(':');\n    } else {\n      options['ciphers'] = props.sslCipherSuites;\n    }\n\n    options['rejectUnauthorized'] = props.sslValidateCertificate;\n\n    // only set checkServerIdentity callback if rejectUnauthorized\n    if (options['rejectUnauthorized'] && Array.isArray(props.sslTrustedCommonNameList)) {\n      options['checkServerIdentity'] = this.checkCertificateCNs.bind(this);\n    }\n\n    // only set trust stores and and checkServerIdentity callback\n    // if rejectUnauthorized is true or authClientCert\n    if ((options['rejectUnauthorized'] || useClientCert) &&\n      props.sslTrustStores && props.sslTrustStores.length) {\n      const tsContents = [];\n      props.sslTrustStores.forEach((tsFile) => {\n        try {\n          tsContents.push(fs.readFileSync(tsFile));\n        } catch (e) {\n          LOG_WARN(`Failed to load trust store ${tsFile}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load trust store ${tsFile}`,\n            ErrorSubcode.FAILED_LOADING_TRUSTSTORE,\n            e);\n        }\n      });\n      options['ca'] = tsContents;\n    }\n\n\n    if (useClientCert) {\n      if (props.sslPfx) {\n        try {\n          options['pfx'] = fs.readFileSync(props.sslPfx);\n          options['passphrase'] = props.sslPfxPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load pfx file ${props.sslPfx}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load pfx ${props.sslPfx}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslPrivateKey) {\n        try {\n          options['key'] = fs.readFileSync(props.sslPrivateKey);\n          options['passphrase'] = props.sslPrivateKeyPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load private key ${props.sslPrivateKey}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load private key ${props.sslPrivateKey}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslCertificate) {\n        try {\n          options['cert'] = fs.readFileSync(props.sslCertificate);\n        } catch (e) {\n          LOG_WARN(`Failed to load certificate file ${props.sslCertificate}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load certificate ${props.sslCertificate}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n    }\n    //SNI\n    const hostname = parseURL(this._url).hostname;\n    options['servername'] = hostname;\n    return options;\n    /* eslint-enable dot-notation */\n  }\n\n}\n\nmodule.exports.NodeTLSOptsMixin = NodeTLSOptsMixin;\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  if (typeof navigator !== 'undefined') {\n      /* eslint-env browser */\n    if (navigator.appVersion.indexOf('MSIE 9.') !== -1 ||\n        navigator.appVersion.indexOf('Trident/') !== -1) {\n        // Avoid the buffer-based version for IE9, 10, and 11, but not Edge.\n      return require('./buffer-smf-client').BufferSMFClient;\n    }\n  }\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { CompressedTransport } = require('./transport-compression');\nconst { TcpRawTransport } = require('./transport-tcp-plaintext');\nconst { TcpTlsTransport } = require('./transport-tcp-tls');\nconst { TlsOnlyTransport } = require('./transport-tls');\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\nmodule.exports.CompressedTransport = CompressedTransport;\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const { Duplex } = require('stream');\nconst { LOG_WARN, LOG_TRACE } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\n\n/**\n * This is a Duplex Stream encapsulating a Transport.\n * It transparently passes reads, writes, and events until \"shunted\".\n * After that, nothing gets through.\n *\n * The intermediate \"dontEnd\" state allows a TLS shutdown to run its course\n * without closing the underlying transport in the end.\n *\n * Intended lifecycle:\n *\n * 1, create underlying transport\n * 2, create ShuntableTransport with underlying transport\n * 3, pass shuntableTransport to tls.connect\n * 4, connect underlying transport\n *\n * <traffic may flow until TLS shutdown desired>\n *\n * 1, shuntableTransport.dontend();\n * 2, tlsSocket.end();\n * 3, on 'closed' event: take and start using shuntableSocket.socket.\n *\n * For an explanation of _read and _write see\n * https://nodejs.org/api/stream.html#stream_implementing_a_duplex_stream\n *\n * @private\n */\n\nclass ShuntableTransport extends Duplex {\n  constructor(options) {\n    super(options);\n    this._shunted = false;\n    this._dontEnd = false;\n    this._underlyingTransport = options.underlyingTransport;\n    // Buffers data-callback pairs until connected or underlying transport decongests.\n    // Should never have more than 1 item as long as the stream contract is upheld.\n    this._interimBuffer = [];\n    this._transportDrained = true;\n    this._connected = false;\n  }\n\n  shunt() {\n    this._shunted = true;\n  }\n\n  dontEnd() {\n    this._dontEnd = true;\n  }\n\n  _write(chunk, encoding, callback) {\n    if (!this._shunted) {\n      if (!this._transportDrained || !this._connected) {\n        this._interimBuffer.push([chunk, callback]);\n        return;\n      }\n      const rc = this._underlyingTransport.send(chunk);\n      switch (rc) {\n        case TransportReturnCode.OK:\n          this._transportDrained = true;\n          callback();\n          break;\n        case TransportReturnCode.NO_SPACE:\n          this._transportDrained = false;\n          this._interimBuffer.push([chunk, callback]);\n          break;\n        case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n          this.emit('error',\n                    'Underlying transport in invalid state for send.');\n          break;\n        default:\n          LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n      }\n    }\n  }\n\n  //_read(size) {\n  _read() {\n    if (!this._shunted) {\n      this._underlyingTransport.unpause();\n    }\n  }\n\n  rxDataBuffer(data) {\n    if (!this._shunted) {\n      const noPause = this.push(data);\n      if (!noPause) {\n        this._underlyingTransport.pause();\n      }\n    }\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onConnect();\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain();\n        break;\n      default:\n        LOG_WARN(`TLS layer got unkown event code ${transportEvent.getTransportEventCode}`);\n    }\n  }\n  onError(transportEvent) {\n    if (!this._shunted) {\n      this.emit('error', transportEvent.getInfoStr());\n    }\n  }\n\n  onClose(transportEvent) {\n    this._connected = false;\n    if (!this._shunted) {\n      LOG_TRACE(`ShuntableTransport emits close for transport event ${transportEvent}`);\n      this.emit('close');\n    }\n  }\n\n  onDrain() {\n    if (!this._shunted) {\n      this._transportDrained = true;\n      if (this._interimBuffer && this._interimBuffer.length > 0) {\n        const resendBuffer = this._interimBuffer;\n        this._interimBuffer = [];\n        resendBuffer.forEach(([data, callback]) => this._write(data, null, callback));\n      }\n      if (!this._transportDrained) {\n        return;\n      }\n      this.emit('drain');\n    }\n  }\n\n  onConnect() {\n    this._connected = true;\n    if (!this._shunted) {\n      this.onDrain(); // flush interimbuffer.\n      this.emit('connect');\n    }\n  }\n\n  end(chunk, encoding, callback) {\n    if (!this._shunted && !this._dontEnd) {\n      if (typeof chunk === 'function') { // sometimes TLS calls end() wrong...\n        this._underlyingTransport.destroy('End from TLS');\n        chunk();\n      } else {\n        const cb = () => { this._underlyingTransport.destroy('End from TLS'); callback(); };\n        this._write(chunk, encoding, cb);\n      }\n    } else if (!this._shunted) {\n      if (typeof chunk !== 'function') { // sometimes TLS calls end() wrong...\n        this._write(chunk, encoding, callback);\n      } else {\n        chunk();\n      }\n    }\n  }\n\n  destroy(error) {\n    if (!this._shunted && !this._dontEnd) {\n      this._underlyingTransport.destroy(error);\n    }\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (!this._shunted && !this._dontEnd && this._underlyingTransport) {\n      return this._underlyingTransport.forceFailure(msg);\n    }\n  }\n\n  setNoDelay(arg) {\n    if (!this.shunted) {\n      LOG_TRACE(`Ignoring setNoDelay(${arg})`);\n    }\n  }\n}\n\nmodule.exports.ShuntableTransport = ShuntableTransport;\n","const zlib = require('zlib');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_INFO, LOG_WARN } = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Modular transport layer performing zlib compression.\n * Requires an underlying transport, can be plaintext or TLS, connected or not.\n * Uses the nodejs zlib module which in turn uses the libuv threadpool in nodejs.\n * The end user may need to increase threadpool size.\n * https://nodejs.org/api/zlib.html#zlib_threadpool_usage\n *\n * @private\n */\nclass CompressedTransport extends TransportBase {\n\n  constructor(eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super('tcp://x', eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._waitForSocketDrain = false;\n    this._waitForCompressorDrain = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._socketDrained = true;\n    this._compressorDrained = true;\n    this._interimBuffer = [];\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n\n    this._compressor = null;\n    this._decompressor = null;\n\n    this._compressionLevel = props.compressionLevel;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  // Underlying transport callback.\n  rxDataBuffer(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportCompressedSession stray rxDataBuffer, ignoring.');\n      return;\n    }\n    this._decompressor.write(data);\n    this._decompressor.flush();\n  }\n\n  /**\n   * Decompressor callback.\n   * @private\n   * @param {Buffer} data the data\n   */\n  onData(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportSession stray onData, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Underlying transport callback for SEND_ERROR\n   * @private\n   * @param {TransportSessionEvent} transportEvent the error\n   */\n  onError(transportEvent) {\n    // Need new state for \"waiting for decompressor flush after error\"?\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    const onErrorStage2 = () => {\n      if (this._eventCB) {\n        LOG_TRACE('Decompressor flush returned, passing error to eventCB.');\n        this._eventCB(transportEvent);\n      } else {\n        LOG_TRACE('Decompressor flush returned, but eventCB already cleared.');\n      }\n    };\n\n    LOG_TRACE('Flushing decompressor on socket error.');\n    this._decompressor.flush(zlib.Z_SYNC_FLUSH, onErrorStage2);\n  }\n\n  /**\n   * Treat any zlib error the same as a socket error,\n   * plus close the socket.\n   * @private\n   * @param {Error} error the error\n   */\n  onZlibError(error) {\n    this._socketError = error;\n    this._underlyingTransport.destroy(`Connection closed by zlib error. Message:${error}`,\n                                      ErrorSubcode.COMMUNICATION_ERROR);\n  }\n  /**\n   * underlying transport callback for DESTROYED_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onClose(transportEvent) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      this._destroy(transportEvent);\n    } else {\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      LOG_TRACE('Flushing decompressor on socket close.');\n      const stage2destroy = () => this._destroy(transportEvent);\n      this._decompressor.flush(zlib.Z_SYNC_FLUSH, stage2destroy);\n    }\n  }\n\n  /**\n   * underlying transport callback for UP_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onOpen(transportEvent) {\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_INFO(`compressor stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(transportEvent);\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    LOG_TRACE('Initializing compressed transport');\n    let rc = TransportReturnCode.OK;\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    if (this._underlyingTransport._state === TransportSessionState.DOWN) {\n      rc = this._underlyingTransport.connect();\n    } else {\n      this._state = TransportSessionState.SESSION_UP;\n    }\n    try {\n      // initialize compressor, decompressor.\n      const options = {\n        highWaterMark: this._sendBufferMaxSize,\n        level:         this._compressionLevel,\n        flush:         zlib.Z_SYNC_FLUSH,\n      };\n      this._compressor =\n        zlib.createDeflateRaw(options);\n      this._decompressor = zlib.createInflateRaw({ flush: zlib.Z_SYNC_FLUSH });\n\n      this._decompressor.on('data', this.onData.bind(this));\n      this._decompressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('data', this.sendCompressed.bind(this));\n      this._compressor.on('drain', this.onCompressorDrain.bind(this));\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp zlib layer: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return rc;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * We'll clean up zlib objects on the DESTROYED_NOTICE.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n    return this._underlyingTransport.destroy(msg, subcode);\n  }\n\n  // second stage of the underlying transport callback for DESTROYED_NOTICE.\n  // We should only ever get here once the underlying transport is destroyed.\n  // See onClose.\n  _destroy(transportEvent) {\n    if (this._state !== TransportSessionState.DOWN) {\n      this._state = TransportSessionState.DOWN;\n      const onerrorStub = function onerrorStub() { };\n      this._waitForSocketDrain = false;\n      this._flushCallback = null;\n      this._socketDrained = true;\n      this._client = null; // Don't accept data.\n      this._compressor.removeAllListeners();\n      this._compressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._decompressor.removeAllListeners();\n      this._decompressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._compressor.unpipe();\n      //https://github.com/nodejs/node/issues/15625\n      this._compressor._hadError = true;\n      this._compressor.close();\n      this._compressor = null;\n      this._decompressor.close();\n      this._decompressor = null;\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      this._eventCB(transportEvent);\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._underlyingTransport) {\n      return this._underlyingTransport.forceFailure(msg);\n    }\n    return TransportReturnCode.OK;\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onOpen(transportEvent);\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain(transportEvent);\n        break;\n      default:\n        LOG_WARN('Compressing transport layer got unkown event code ' +\n          `${transportEvent.getTransportEventCode}`);\n    }\n  }\n\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    const flushStage2 = () => this._underlyingTransport.flush(callback);\n    this._compressor.flush(flushStage2);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      // On a lower layer socket error this transport is in WAITING_FOR_DESTROY state\n      // until the decompressor flushes.\n      // We could respond with NO_SPACE, but we'd have to send a CAN_SEND on reconnect.\n      LOG_INFO(`Compressing transport can't send in state ${this._state}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Congestion control.\n    // We try to avoid pumping too much data into the compressor until the socket drains.\n    // We pause()/resume() the compressor while the socket is congested, but still.\n    if (forceAllowEnqueue\n      || (this._socketDrained && this._compressorDrained)) {\n      if (this._interimBuffer.length > 0) {\n        LOG_WARN(`Allowing send when interimBuffer is ${this._interimBuffer.length}`);\n      }\n      this._compressorDrained = this._compressor.write(message, 'ascii');\n      this._compressor.flush();\n      this._clientstats.bytesWritten += message.length;\n      ++this._clientstats.msgWritten;\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    if (!this._socketDrained) {\n      this._waitForSocketDrain = true;\n    }\n    if (!this._compressorDrained) {\n      this._waitForCompressorDrain = true;\n    }\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  sendCompressed(data) {\n    if (!this._socketDrained) {\n      this._interimBuffer.push(data);\n      this._compressor.pause();\n      return;\n    }\n    const rc = this._underlyingTransport.send(data);\n    switch (rc) {\n      case TransportReturnCode.OK:\n        this._socketDrained = true;\n        break;\n      case TransportReturnCode.NO_SPACE:\n        this._socketDrained = false;\n        this._interimBuffer.push(data);\n        this._compressor.pause();\n        break;\n      case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n        this.onError(new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            'Underlying transport in invalid state for send.',\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n        break;\n      default:\n        LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n    }\n  }\n\n  /**\n   * Underlying transport callback for CAN_SEND.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   */\n  onDrain() {\n    this._socketDrained = true;\n    if (this._interimBuffer && this._interimBuffer.length > 0) {\n      const resendBuffer = this._interimBuffer;\n      this._interimBuffer = [];\n      resendBuffer.forEach(data => this.sendCompressed(data));\n    }\n    if (!this._socketDrained) {\n      return;\n    }\n    this._compressor.resume();\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._waitForSocketDrain) {\n      this._waitForSocketDrain = false;\n      if (!this._waitForCompressorDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  onCompressorDrain() {\n    this._compressorDrained = true;\n    if (this._waitForCompressorDrain) {\n      this._waitForCompressorDrain = false;\n      if (!this._waitForSocketDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    this._underlyingTransport.pause();\n    this._decompressor.pause();\n  }\n\n  unpause() {\n    this._underlyingTransport.unpause();\n    this._decompressor.resume();\n  }\n\n}\n\nmodule.exports.CompressedTransport = CompressedTransport;\n","const net = require('net');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Tcp (tcps://) transport without TLS (tcps://) support.\n * Only works in node.js.\n * @private\n */\nclass TcpRawTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._rawSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._props._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('Plaintext transport received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('Plaintext transport stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.on('connect', this.onOpen.bind(this, this._rawSocket));\n      // Only connect after the connect listener is registered:\n      this._rawSocket.connect(port, host);\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._rawSocket.on('data', this.onData.bind(this, this._rawSocket));\n      this._rawSocket.on('error', this.onError.bind(this, this._rawSocket));\n      this._rawSocket.on('close', this.onClose.bind(this, this._rawSocket));\n      this._rawSocket.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._rawSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._rawSocket) {\n        this._rawSocket.removeAllListeners();\n        this._rawSocket.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._rawSocket.destroy();\n        this._rawSocket.destroy();\n        this._rawSocket = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._rawSocket) {\n        this._rawSocket.destroy(new Error(errorMsg));\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      LOG_ERROR('plaintext: INVALID_STATE_FOR_OPERATION');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < (this._sendBufferMaxSize - this._rawSocket.bufferSize)) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._rawSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    if (this._rawSocket) {\n      this._rawSocket.pause();\n    }\n  }\n\n  unpause() {\n    if (this._rawSocket) {\n      this._rawSocket.resume();\n    }\n  }\n\n}\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\n","const net = require('net');\nconst tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Tcp (smf) transport with TLS (tcps://) support.\n * Only works in node.js.\n * Modelled after the WebSocket transport mostly,\n * except there is no downgrade mechanism.\n * There is no separate \"Transport\" class\n * to manage the downgrade FSM:\n * The TransportSession is the Transport.\n\n * @private\n */\nclass TcpTlsTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    //this._socket = null;\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._tlsSocket = null;\n    // Always the socket to write to.\n    // could be _rawsocket, _tlsSocket, or _compressor.\n    this._writable = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(newValue) {\n    this._clientstats = newValue;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TcpTransportSession received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.connect(port, host);\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._rawSocket;\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._rawSocket));\n      this._writable = this._tlsSocket;\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._writable.on('data', this.onData.bind(this, this._rawSocket));\n      this._writable.on('error', this.onError.bind(this, this._rawSocket));\n      this._writable.on('close', this.onClose.bind(this, this._rawSocket));\n      this._writable.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._writable.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._writable) {\n        this._writable.removeAllListeners();\n        this._writable.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._writable.destroy();\n        this._writable.destroy();\n        this._rawSocket = null;\n        this._writable = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._rawSocket && !this._tlsSocket){\n        this._rawSocket.destroy(new Error(errorMsg));\n      } else if (this._writable) {\n        // destroy the writable which should be the _tlsSocket\n        this._writable.destroy(new Error(errorMsg));\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._writable.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._writable.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n}\n\nmixin(TcpTlsTransport, NodeTLSOptsMixin);\n\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { ShuntableTransport } = require('./shuntable-transport');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Modular transport with TLS (tcps://) support.\n * Only works in node.js.\n * Must be initialized with an underlying transport\n * (currently only the plaintext tcp transport is supported).\n * Wraps the underlying transport in a ShuntableTransport stream\n * which can be passed to tls.connect()\n * Supports  TLS shutdown leaving the socket open.\n * @private\n */\nclass TlsOnlyTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    this._tlsSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  getUnderlyingTransport() {\n    return this._underlyingTransport;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  // eventCB and rxDataBuffer forwarded to _shuntableTransport\n  // Chicken-egg problem in the factory...\n  eventCB(transportEvent) {\n    this._shuntableTransport.eventCB(transportEvent);\n  }\n\n  rxDataBuffer(data) {\n    this._shuntableTransport.rxDataBuffer(data);\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('Tls transport stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tls transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      this._eventCB(\n        new TransportSessionEvent(\n          TransportSessionEventCode.SEND_ERROR,\n          `Connection error${error}`,\n          null,\n          ErrorSubcode.CONNECTION_ERROR, null));\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tls transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._tlsSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TlsTransportSession received socket open event.');\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TlsTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._tlsSocket) {\n      LOG_ERROR('TCP transport can not connect once _tlsSocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    LOG_DEBUG('Establishing TLS transport session');\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    try {\n      const duplexOptions = { underlyingTransport: this._underlyingTransport };\n      this._shuntableTransport = new ShuntableTransport(duplexOptions);\n      this._underlyingTransport.connect();\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._shuntableTransport;\n      // host and port can be set here for certificate validation in the future.\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._tlsSocket));\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._tlsSocket.on('data', this.onData.bind(this, this._tlsSocket));\n      this._tlsSocket.on('error', this.onError.bind(this, this._tlsSocket));\n      this._tlsSocket.on('close', this.onClose.bind(this, this._tlsSocket));\n      this._tlsSocket.on('drain', this.onDrain.bind(this, this._tlsSocket));\n      this._tlsSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create TLS socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('TLS transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    //return this._underlyingTransport.destroy(msg, subcode);\n    return this._destroy(this._tlsSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tls transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._tlsSocket) {\n        this._tlsSocket.removeAllListeners();\n        this._tlsSocket.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._tlsSocket.destroy();\n        this._tlsSocket.destroy();\n        this._tlsSocket = null;\n      }\n\n      if (this._underlyingTransport) {\n        this._underlyingTransport.destroy(msg, subcode);\n        this._underlyingTransport = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._tlsSocket) {\n        this._tlsSocket.destroy(new Error(errorMsg));\n      }\n\n      if (this._underlyingTransport) {\n        this._underlyingTransport.forceFailure(errorMsg);\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._tlsSocket.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._tlsSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  tlsShutdown(callback) {\n    this._tlsSocket.removeAllListeners('close');\n    this._tlsSocket.on('close', this.tlsShutdownStage2.bind(this, callback));\n    this._shuntableTransport.dontEnd();\n    this._tlsSocket.end();\n  }\n\n  tlsShutdownStage2(callback) {\n    this._shuntableTransport.shunt();\n    this._tlsSocket.removeAllListeners();\n    this._tlsSocket = null;\n    this._shuntableTransport = null;\n    this._underlyingTransport.rehome(this._eventCB, this._client);\n    this._underlyingTransport.setClientStats(this.getClientStats());\n    this.setClientStats(null);\n    this._eventCB = null;\n    this._client = null;\n    callback(this._underlyingTransport);\n  }\n}\n\nmixin(TlsOnlyTransport, NodeTLSOptsMixin);\n\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code, to be overridden in subclass\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n    LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n    if (this._transportSession) {\n      this._transportSession._socket._sender._socket.destroy(new Error(errorMsg));\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\nconst clone = require('./lib/clone');\n\nmodule.exports = {\n  clone,\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const cloneObj = require('./clone'); // using the modified local clone version\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","/**\n * Copyright (c) 2011-2016 Paul Vorbach and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining \n * a copy of this software and associated documentation files \n * (the “Software”), to deal in the Software without restriction, \n * including without limitation the rights to use, copy, modify, \n * merge, publish, distribute, sublicense, and/or sell copies of \n * the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included \n * in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n'use strict';\n\n/**\n * The is a local modified version of the clone npm module (https://www.npmjs.com/package/clone).\n * According to its description, it offers a foolproof deep cloning \n * of objects, arrays, numbers, strings, maps, sets, \n * promises, etc. in JavaScript.\n * \n * I refactored it to be compatible with Webpack.\n * Refator List:\n * - update the use of the 'var' keyword to 'let' and 'const' where appropriate.\n * - Made the variable names more clearer and intuitive (clean code)\n * - I used ES6 contants/definitions where possible.\n * \n * Original can be found Here:\n * - On Npm -> https://www.npmjs.com/package/clone\n * - On GitHub -> https://github.com/pvorb/node-clone\n * \n * Created by oodigie on 26/05/2023.\n */\nconst clone = (function() {\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nlet nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nlet nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nlet nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  const allParents = [];\n  const allChildren = [];\n\n  const useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    let child;\n    let proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      const index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      let keyChild, valueChild;\n      parent.forEach(function(value, key) {\n        keyChild = _clone(key, depth - 1);\n        valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      let entryChild;\n      parent.forEach(function(value) {\n        entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (let i in parent) {\n      let attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      const symbols = Object.getOwnPropertySymbols(parent);\n      for (let i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        let symbol = symbols[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      const allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (let i = 0; i < allPropertyNames.length; i++) {\n        let propertyName = allPropertyNames[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  let emptyCloneFunc = function () {};\n  emptyCloneFunc.prototype = parent;\n  return new emptyCloneFunc();\n};\n\n// private utility functions\n\nfunction __objToStr(obj) {\n  return Object.prototype.toString.call(obj);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(regExpOptions) {\n  let flags = '';\n  if (regExpOptions.global) flags += 'g';\n  if (regExpOptions.ignoreCase) flags += 'i';\n  if (regExpOptions.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n\n})();\n\nmodule.exports = clone;\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","'use strict';\n\nconst WebSocket = require('./lib/websocket');\n\nWebSocket.createWebSocketStream = require('./lib/stream');\nWebSocket.Server = require('./lib/websocket-server');\nWebSocket.Receiver = require('./lib/receiver');\nWebSocket.Sender = require('./lib/sender');\n\nWebSocket.WebSocket = WebSocket;\nWebSocket.WebSocketServer = WebSocket.Server;\n\nmodule.exports = WebSocket;\n","'use strict';\n\nconst { EMPTY_BUFFER } = require('./constants');\n\nconst FastBuffer = Buffer[Symbol.species];\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nfunction concat(list, totalLength) {\n  if (list.length === 0) return EMPTY_BUFFER;\n  if (list.length === 1) return list[0];\n\n  const target = Buffer.allocUnsafe(totalLength);\n  let offset = 0;\n\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i];\n    target.set(buf, offset);\n    offset += buf.length;\n  }\n\n  if (offset < totalLength) {\n    return new FastBuffer(target.buffer, target.byteOffset, offset);\n  }\n\n  return target;\n}\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nfunction _mask(source, mask, output, offset, length) {\n  for (let i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nfunction _unmask(buffer, mask) {\n  for (let i = 0; i < buffer.length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */\nfunction toArrayBuffer(buf) {\n  if (buf.length === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);\n}\n\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */\nfunction toBuffer(data) {\n  toBuffer.readOnly = true;\n\n  if (Buffer.isBuffer(data)) return data;\n\n  let buf;\n\n  if (data instanceof ArrayBuffer) {\n    buf = new FastBuffer(data);\n  } else if (ArrayBuffer.isView(data)) {\n    buf = new FastBuffer(data.buffer, data.byteOffset, data.byteLength);\n  } else {\n    buf = Buffer.from(data);\n    toBuffer.readOnly = false;\n  }\n\n  return buf;\n}\n\nmodule.exports = {\n  concat,\n  mask: _mask,\n  toArrayBuffer,\n  toBuffer,\n  unmask: _unmask\n};\n\n/* istanbul ignore else  */\nif (!process.env.WS_NO_BUFFER_UTIL) {\n  try {\n    const bufferUtil = require('bufferutil');\n\n    module.exports.mask = function (source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);\n      else bufferUtil.mask(source, mask, output, offset, length);\n    };\n\n    module.exports.unmask = function (buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);\n      else bufferUtil.unmask(buffer, mask);\n    };\n  } catch (e) {\n    // Continue regardless of the error.\n  }\n}\n","'use strict';\n\nmodule.exports = {\n  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],\n  EMPTY_BUFFER: Buffer.alloc(0),\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\n  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),\n  kListener: Symbol('kListener'),\n  kStatusCode: Symbol('status-code'),\n  kWebSocket: Symbol('websocket'),\n  NOOP: () => {}\n};\n","'use strict';\n\nconst { kForOnEventAttribute, kListener } = require('./constants');\n\nconst kCode = Symbol('kCode');\nconst kData = Symbol('kData');\nconst kError = Symbol('kError');\nconst kMessage = Symbol('kMessage');\nconst kReason = Symbol('kReason');\nconst kTarget = Symbol('kTarget');\nconst kType = Symbol('kType');\nconst kWasClean = Symbol('kWasClean');\n\n/**\n * Class representing an event.\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @throws {TypeError} If the `type` argument is not specified\n   */\n  constructor(type) {\n    this[kTarget] = null;\n    this[kType] = type;\n  }\n\n  /**\n   * @type {*}\n   */\n  get target() {\n    return this[kTarget];\n  }\n\n  /**\n   * @type {String}\n   */\n  get type() {\n    return this[kType];\n  }\n}\n\nObject.defineProperty(Event.prototype, 'target', { enumerable: true });\nObject.defineProperty(Event.prototype, 'type', { enumerable: true });\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {Number} [options.code=0] The status code explaining why the\n   *     connection was closed\n   * @param {String} [options.reason=''] A human-readable string explaining why\n   *     the connection was closed\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\n   *     connection was cleanly closed\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kCode] = options.code === undefined ? 0 : options.code;\n    this[kReason] = options.reason === undefined ? '' : options.reason;\n    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get code() {\n    return this[kCode];\n  }\n\n  /**\n   * @type {String}\n   */\n  get reason() {\n    return this[kReason];\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get wasClean() {\n    return this[kWasClean];\n  }\n}\n\nObject.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.error=null] The error that generated this event\n   * @param {String} [options.message=''] The error message\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kError] = options.error === undefined ? null : options.error;\n    this[kMessage] = options.message === undefined ? '' : options.message;\n  }\n\n  /**\n   * @type {*}\n   */\n  get error() {\n    return this[kError];\n  }\n\n  /**\n   * @type {String}\n   */\n  get message() {\n    return this[kMessage];\n  }\n}\n\nObject.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });\nObject.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.data=null] The message content\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kData] = options.data === undefined ? null : options.data;\n  }\n\n  /**\n   * @type {*}\n   */\n  get data() {\n    return this[kData];\n  }\n}\n\nObject.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {(Function|Object)} handler The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener(type, handler, options = {}) {\n    for (const listener of this.listeners(type)) {\n      if (\n        !options[kForOnEventAttribute] &&\n        listener[kListener] === handler &&\n        !listener[kForOnEventAttribute]\n      ) {\n        return;\n      }\n    }\n\n    let wrapper;\n\n    if (type === 'message') {\n      wrapper = function onMessage(data, isBinary) {\n        const event = new MessageEvent('message', {\n          data: isBinary ? data : data.toString()\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'close') {\n      wrapper = function onClose(code, message) {\n        const event = new CloseEvent('close', {\n          code,\n          reason: message.toString(),\n          wasClean: this._closeFrameReceived && this._closeFrameSent\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'error') {\n      wrapper = function onError(error) {\n        const event = new ErrorEvent('error', {\n          error,\n          message: error.message\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'open') {\n      wrapper = function onOpen() {\n        const event = new Event('open');\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else {\n      return;\n    }\n\n    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\n    wrapper[kListener] = handler;\n\n    if (options.once) {\n      this.once(type, wrapper);\n    } else {\n      this.on(type, wrapper);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {(Function|Object)} handler The listener to remove\n   * @public\n   */\n  removeEventListener(type, handler) {\n    for (const listener of this.listeners(type)) {\n      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\n        this.removeListener(type, listener);\n        break;\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  CloseEvent,\n  ErrorEvent,\n  Event,\n  EventTarget,\n  MessageEvent\n};\n\n/**\n * Call an event listener\n *\n * @param {(Function|Object)} listener The listener to call\n * @param {*} thisArg The value to use as `this`` when calling the listener\n * @param {Event} event The event to pass to the listener\n * @private\n */\nfunction callListener(listener, thisArg, event) {\n  if (typeof listener === 'object' && listener.handleEvent) {\n    listener.handleEvent.call(listener, event);\n  } else {\n    listener.call(thisArg, event);\n  }\n}\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */\nfunction push(dest, name, elem) {\n  if (dest[name] === undefined) dest[name] = [elem];\n  else dest[name].push(elem);\n}\n\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */\nfunction parse(header) {\n  const offers = Object.create(null);\n  let params = Object.create(null);\n  let mustUnescape = false;\n  let isEscaping = false;\n  let inQuotes = false;\n  let extensionName;\n  let paramName;\n  let start = -1;\n  let code = -1;\n  let end = -1;\n  let i = 0;\n\n  for (; i < header.length; i++) {\n    code = header.charCodeAt(i);\n\n    if (extensionName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (\n        i !== 0 &&\n        (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n      ) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        const name = header.slice(start, end);\n        if (code === 0x2c) {\n          push(offers, name, params);\n          params = Object.create(null);\n        } else {\n          extensionName = name;\n        }\n\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20 || code === 0x09) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        push(params, header.slice(start, end), true);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        start = end = -1;\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\n        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n      // The value of a quoted-string after unescaping must conform to the\n      // token ABNF, so only token characters are valid.\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n      //\n      if (isEscaping) {\n        if (tokenChars[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n        isEscaping = false;\n      } else if (inQuotes) {\n        if (tokenChars[code] === 1) {\n          if (start === -1) start = i;\n        } else if (code === 0x22 /* '\"' */ && start !== -1) {\n          inQuotes = false;\n          end = i;\n        } else if (code === 0x5c /* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n      } else if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        let value = header.slice(start, end);\n        if (mustUnescape) {\n          value = value.replace(/\\\\/g, '');\n          mustUnescape = false;\n        }\n        push(params, paramName, value);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n\n  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  if (end === -1) end = i;\n  const token = header.slice(start, end);\n  if (extensionName === undefined) {\n    push(offers, token, params);\n  } else {\n    if (paramName === undefined) {\n      push(params, token, true);\n    } else if (mustUnescape) {\n      push(params, paramName, token.replace(/\\\\/g, ''));\n    } else {\n      push(params, paramName, token);\n    }\n    push(offers, extensionName, params);\n  }\n\n  return offers;\n}\n\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */\nfunction format(extensions) {\n  return Object.keys(extensions)\n    .map((extension) => {\n      let configurations = extensions[extension];\n      if (!Array.isArray(configurations)) configurations = [configurations];\n      return configurations\n        .map((params) => {\n          return [extension]\n            .concat(\n              Object.keys(params).map((k) => {\n                let values = params[k];\n                if (!Array.isArray(values)) values = [values];\n                return values\n                  .map((v) => (v === true ? k : `${k}=${v}`))\n                  .join('; ');\n              })\n            )\n            .join('; ');\n        })\n        .join(', ');\n    })\n    .join(', ');\n}\n\nmodule.exports = { format, parse };\n","'use strict';\n\nconst kDone = Symbol('kDone');\nconst kRun = Symbol('kRun');\n\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\nclass Limiter {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */\n  constructor(concurrency) {\n    this[kDone] = () => {\n      this.pending--;\n      this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n\n  /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */\n  add(job) {\n    this.jobs.push(job);\n    this[kRun]();\n  }\n\n  /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */\n  [kRun]() {\n    if (this.pending === this.concurrency) return;\n\n    if (this.jobs.length) {\n      const job = this.jobs.shift();\n\n      this.pending++;\n      job(this[kDone]);\n    }\n  }\n}\n\nmodule.exports = Limiter;\n","'use strict';\n\nconst zlib = require('zlib');\n\nconst bufferUtil = require('./buffer-util');\nconst Limiter = require('./limiter');\nconst { kStatusCode } = require('./constants');\n\nconst FastBuffer = Buffer[Symbol.species];\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst kPerMessageDeflate = Symbol('permessage-deflate');\nconst kTotalLength = Symbol('total-length');\nconst kCallback = Symbol('callback');\nconst kBuffers = Symbol('buffers');\nconst kError = Symbol('error');\n\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n\n/**\n * permessage-deflate implementation.\n */\nclass PerMessageDeflate {\n  /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed if context takeover is disabled\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */\n  constructor(options, isServer, maxPayload) {\n    this._maxPayload = maxPayload | 0;\n    this._options = options || {};\n    this._threshold =\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\n    this._isServer = !!isServer;\n    this._deflate = null;\n    this._inflate = null;\n\n    this.params = null;\n\n    if (!zlibLimiter) {\n      const concurrency =\n        this._options.concurrencyLimit !== undefined\n          ? this._options.concurrencyLimit\n          : 10;\n      zlibLimiter = new Limiter(concurrency);\n    }\n  }\n\n  /**\n   * @type {String}\n   */\n  static get extensionName() {\n    return 'permessage-deflate';\n  }\n\n  /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */\n  offer() {\n    const params = {};\n\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n\n    return params;\n  }\n\n  /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */\n  accept(configurations) {\n    configurations = this.normalizeParams(configurations);\n\n    this.params = this._isServer\n      ? this.acceptAsServer(configurations)\n      : this.acceptAsClient(configurations);\n\n    return this.params;\n  }\n\n  /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */\n  cleanup() {\n    if (this._inflate) {\n      this._inflate.close();\n      this._inflate = null;\n    }\n\n    if (this._deflate) {\n      const callback = this._deflate[kCallback];\n\n      this._deflate.close();\n      this._deflate = null;\n\n      if (callback) {\n        callback(\n          new Error(\n            'The deflate stream was closed while data was being processed'\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsServer(offers) {\n    const opts = this._options;\n    const accepted = offers.find((params) => {\n      if (\n        (opts.serverNoContextTakeover === false &&\n          params.server_no_context_takeover) ||\n        (params.server_max_window_bits &&\n          (opts.serverMaxWindowBits === false ||\n            (typeof opts.serverMaxWindowBits === 'number' &&\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\n        (typeof opts.clientMaxWindowBits === 'number' &&\n          !params.client_max_window_bits)\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!accepted) {\n      throw new Error('None of the extension offers can be accepted');\n    }\n\n    if (opts.serverNoContextTakeover) {\n      accepted.server_no_context_takeover = true;\n    }\n    if (opts.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n    if (typeof opts.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\n    }\n    if (typeof opts.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\n    } else if (\n      accepted.client_max_window_bits === true ||\n      opts.clientMaxWindowBits === false\n    ) {\n      delete accepted.client_max_window_bits;\n    }\n\n    return accepted;\n  }\n\n  /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsClient(response) {\n    const params = response[0];\n\n    if (\n      this._options.clientNoContextTakeover === false &&\n      params.client_no_context_takeover\n    ) {\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n    }\n\n    if (!params.client_max_window_bits) {\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      }\n    } else if (\n      this._options.clientMaxWindowBits === false ||\n      (typeof this._options.clientMaxWindowBits === 'number' &&\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\n    ) {\n      throw new Error(\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\n      );\n    }\n\n    return params;\n  }\n\n  /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */\n  normalizeParams(configurations) {\n    configurations.forEach((params) => {\n      Object.keys(params).forEach((key) => {\n        let value = params[key];\n\n        if (value.length > 1) {\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\n        }\n\n        value = value[0];\n\n        if (key === 'client_max_window_bits') {\n          if (value !== true) {\n            const num = +value;\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(\n                `Invalid value for parameter \"${key}\": ${value}`\n              );\n            }\n            value = num;\n          } else if (!this._isServer) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else if (key === 'server_max_window_bits') {\n          const num = +value;\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n          value = num;\n        } else if (\n          key === 'client_no_context_takeover' ||\n          key === 'server_no_context_takeover'\n        ) {\n          if (value !== true) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else {\n          throw new Error(`Unknown parameter \"${key}\"`);\n        }\n\n        params[key] = value;\n      });\n    });\n\n    return configurations;\n  }\n\n  /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  decompress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._decompress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  compress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._compress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _decompress(data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._inflate = zlib.createInflateRaw({\n        ...this._options.zlibInflateOptions,\n        windowBits\n      });\n      this._inflate[kPerMessageDeflate] = this;\n      this._inflate[kTotalLength] = 0;\n      this._inflate[kBuffers] = [];\n      this._inflate.on('error', inflateOnError);\n      this._inflate.on('data', inflateOnData);\n    }\n\n    this._inflate[kCallback] = callback;\n\n    this._inflate.write(data);\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      const err = this._inflate[kError];\n\n      if (err) {\n        this._inflate.close();\n        this._inflate = null;\n        callback(err);\n        return;\n      }\n\n      const data = bufferUtil.concat(\n        this._inflate[kBuffers],\n        this._inflate[kTotalLength]\n      );\n\n      if (this._inflate._readableState.endEmitted) {\n        this._inflate.close();\n        this._inflate = null;\n      } else {\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n          this._inflate.reset();\n        }\n      }\n\n      callback(null, data);\n    });\n  }\n\n  /**\n   * Compress data.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _compress(data, fin, callback) {\n    const endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._deflate = zlib.createDeflateRaw({\n        ...this._options.zlibDeflateOptions,\n        windowBits\n      });\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      this._deflate.on('data', deflateOnData);\n    }\n\n    this._deflate[kCallback] = callback;\n\n    this._deflate.write(data);\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      if (!this._deflate) {\n        //\n        // The deflate stream was closed while data was being processed.\n        //\n        return;\n      }\n\n      let data = bufferUtil.concat(\n        this._deflate[kBuffers],\n        this._deflate[kTotalLength]\n      );\n\n      if (fin) {\n        data = new FastBuffer(data.buffer, data.byteOffset, data.length - 4);\n      }\n\n      //\n      // Ensure that the callback will not be called again in\n      // `PerMessageDeflate#cleanup()`.\n      //\n      this._deflate[kCallback] = null;\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n        this._deflate.reset();\n      }\n\n      callback(null, data);\n    });\n  }\n}\n\nmodule.exports = PerMessageDeflate;\n\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction deflateOnData(chunk) {\n  this[kBuffers].push(chunk);\n  this[kTotalLength] += chunk.length;\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction inflateOnData(chunk) {\n  this[kTotalLength] += chunk.length;\n\n  if (\n    this[kPerMessageDeflate]._maxPayload < 1 ||\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\n  ) {\n    this[kBuffers].push(chunk);\n    return;\n  }\n\n  this[kError] = new RangeError('Max payload size exceeded');\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\n  this[kError][kStatusCode] = 1009;\n  this.removeListener('data', inflateOnData);\n  this.reset();\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */\nfunction inflateOnError(err) {\n  //\n  // There is no need to call `Zlib#close()` as the handle is automatically\n  // closed when an error is emitted.\n  //\n  this[kPerMessageDeflate]._inflate = null;\n  err[kStatusCode] = 1007;\n  this[kCallback](err);\n}\n","'use strict';\n\nconst { Writable } = require('stream');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  kStatusCode,\n  kWebSocket\n} = require('./constants');\nconst { concat, toArrayBuffer, unmask } = require('./buffer-util');\nconst { isValidStatusCode, isValidUTF8 } = require('./validation');\n\nconst FastBuffer = Buffer[Symbol.species];\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\n\n/**\n * HyBi Receiver implementation.\n *\n * @extends Writable\n */\nclass Receiver extends Writable {\n  /**\n   * Creates a Receiver instance.\n   *\n   * @param {Object} [options] Options object\n   * @param {String} [options.binaryType=nodebuffer] The type for binary data\n   * @param {Object} [options.extensions] An object containing the negotiated\n   *     extensions\n   * @param {Boolean} [options.isServer=false] Specifies whether to operate in\n   *     client or server mode\n   * @param {Number} [options.maxPayload=0] The maximum allowed message length\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   */\n  constructor(options = {}) {\n    super();\n\n    this._binaryType = options.binaryType || BINARY_TYPES[0];\n    this._extensions = options.extensions || {};\n    this._isServer = !!options.isServer;\n    this._maxPayload = options.maxPayload | 0;\n    this._skipUTF8Validation = !!options.skipUTF8Validation;\n    this[kWebSocket] = undefined;\n\n    this._bufferedBytes = 0;\n    this._buffers = [];\n\n    this._compressed = false;\n    this._payloadLength = 0;\n    this._mask = undefined;\n    this._fragmented = 0;\n    this._masked = false;\n    this._fin = false;\n    this._opcode = 0;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragments = [];\n\n    this._state = GET_INFO;\n    this._loop = false;\n  }\n\n  /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   * @private\n   */\n  _write(chunk, encoding, cb) {\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n\n    this._bufferedBytes += chunk.length;\n    this._buffers.push(chunk);\n    this.startLoop(cb);\n  }\n\n  /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */\n  consume(n) {\n    this._bufferedBytes -= n;\n\n    if (n === this._buffers[0].length) return this._buffers.shift();\n\n    if (n < this._buffers[0].length) {\n      const buf = this._buffers[0];\n      this._buffers[0] = new FastBuffer(\n        buf.buffer,\n        buf.byteOffset + n,\n        buf.length - n\n      );\n\n      return new FastBuffer(buf.buffer, buf.byteOffset, n);\n    }\n\n    const dst = Buffer.allocUnsafe(n);\n\n    do {\n      const buf = this._buffers[0];\n      const offset = dst.length - n;\n\n      if (n >= buf.length) {\n        dst.set(this._buffers.shift(), offset);\n      } else {\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n        this._buffers[0] = new FastBuffer(\n          buf.buffer,\n          buf.byteOffset + n,\n          buf.length - n\n        );\n      }\n\n      n -= buf.length;\n    } while (n > 0);\n\n    return dst;\n  }\n\n  /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  startLoop(cb) {\n    let err;\n    this._loop = true;\n\n    do {\n      switch (this._state) {\n        case GET_INFO:\n          err = this.getInfo();\n          break;\n        case GET_PAYLOAD_LENGTH_16:\n          err = this.getPayloadLength16();\n          break;\n        case GET_PAYLOAD_LENGTH_64:\n          err = this.getPayloadLength64();\n          break;\n        case GET_MASK:\n          this.getMask();\n          break;\n        case GET_DATA:\n          err = this.getData(cb);\n          break;\n        default:\n          // `INFLATING`\n          this._loop = false;\n          return;\n      }\n    } while (this._loop);\n\n    cb(err);\n  }\n\n  /**\n   * Reads the first two bytes of a frame.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getInfo() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(2);\n\n    if ((buf[0] & 0x30) !== 0x00) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'RSV2 and RSV3 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_2_3'\n      );\n    }\n\n    const compressed = (buf[0] & 0x40) === 0x40;\n\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'RSV1 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_1'\n      );\n    }\n\n    this._fin = (buf[0] & 0x80) === 0x80;\n    this._opcode = buf[0] & 0x0f;\n    this._payloadLength = buf[1] & 0x7f;\n\n    if (this._opcode === 0x00) {\n      if (compressed) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n      }\n\n      if (!this._fragmented) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'invalid opcode 0',\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n      }\n\n      this._opcode = this._fragmented;\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n      if (this._fragmented) {\n        this._loop = false;\n        return error(\n          RangeError,\n          `invalid opcode ${this._opcode}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n      }\n\n      this._compressed = compressed;\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n      if (!this._fin) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'FIN must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_FIN'\n        );\n      }\n\n      if (compressed) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n      }\n\n      if (\n        this._payloadLength > 0x7d ||\n        (this._opcode === 0x08 && this._payloadLength === 1)\n      ) {\n        this._loop = false;\n        return error(\n          RangeError,\n          `invalid payload length ${this._payloadLength}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n      }\n    } else {\n      this._loop = false;\n      return error(\n        RangeError,\n        `invalid opcode ${this._opcode}`,\n        true,\n        1002,\n        'WS_ERR_INVALID_OPCODE'\n      );\n    }\n\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n    this._masked = (buf[1] & 0x80) === 0x80;\n\n    if (this._isServer) {\n      if (!this._masked) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'MASK must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_MASK'\n        );\n      }\n    } else if (this._masked) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'MASK must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_MASK'\n      );\n    }\n\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n    else return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+16).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength16() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    this._payloadLength = this.consume(2).readUInt16BE(0);\n    return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+64).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength64() {\n    if (this._bufferedBytes < 8) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(8);\n    const num = buf.readUInt32BE(0);\n\n    //\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n    // if payload length is greater than this number.\n    //\n    if (num > Math.pow(2, 53 - 32) - 1) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\n        false,\n        1009,\n        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'\n      );\n    }\n\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n    return this.haveLength();\n  }\n\n  /**\n   * Payload length has been read.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  haveLength() {\n    if (this._payloadLength && this._opcode < 0x08) {\n      this._totalPayloadLength += this._payloadLength;\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'Max payload size exceeded',\n          false,\n          1009,\n          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n        );\n      }\n    }\n\n    if (this._masked) this._state = GET_MASK;\n    else this._state = GET_DATA;\n  }\n\n  /**\n   * Reads mask bytes.\n   *\n   * @private\n   */\n  getMask() {\n    if (this._bufferedBytes < 4) {\n      this._loop = false;\n      return;\n    }\n\n    this._mask = this.consume(4);\n    this._state = GET_DATA;\n  }\n\n  /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  getData(cb) {\n    let data = EMPTY_BUFFER;\n\n    if (this._payloadLength) {\n      if (this._bufferedBytes < this._payloadLength) {\n        this._loop = false;\n        return;\n      }\n\n      data = this.consume(this._payloadLength);\n\n      if (\n        this._masked &&\n        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0\n      ) {\n        unmask(data, this._mask);\n      }\n    }\n\n    if (this._opcode > 0x07) return this.controlMessage(data);\n\n    if (this._compressed) {\n      this._state = INFLATING;\n      this.decompress(data, cb);\n      return;\n    }\n\n    if (data.length) {\n      //\n      // This message is not compressed so its length is the sum of the payload\n      // length of all fragments.\n      //\n      this._messageLength = this._totalPayloadLength;\n      this._fragments.push(data);\n    }\n\n    return this.dataMessage();\n  }\n\n  /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */\n  decompress(data, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\n      if (err) return cb(err);\n\n      if (buf.length) {\n        this._messageLength += buf.length;\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n          return cb(\n            error(\n              RangeError,\n              'Max payload size exceeded',\n              false,\n              1009,\n              'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n            )\n          );\n        }\n\n        this._fragments.push(buf);\n      }\n\n      const er = this.dataMessage();\n      if (er) return cb(er);\n\n      this.startLoop(cb);\n    });\n  }\n\n  /**\n   * Handles a data message.\n   *\n   * @return {(Error|undefined)} A possible error\n   * @private\n   */\n  dataMessage() {\n    if (this._fin) {\n      const messageLength = this._messageLength;\n      const fragments = this._fragments;\n\n      this._totalPayloadLength = 0;\n      this._messageLength = 0;\n      this._fragmented = 0;\n      this._fragments = [];\n\n      if (this._opcode === 2) {\n        let data;\n\n        if (this._binaryType === 'nodebuffer') {\n          data = concat(fragments, messageLength);\n        } else if (this._binaryType === 'arraybuffer') {\n          data = toArrayBuffer(concat(fragments, messageLength));\n        } else {\n          data = fragments;\n        }\n\n        this.emit('message', data, true);\n      } else {\n        const buf = concat(fragments, messageLength);\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          this._loop = false;\n          return error(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n        }\n\n        this.emit('message', buf, false);\n      }\n    }\n\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  controlMessage(data) {\n    if (this._opcode === 0x08) {\n      this._loop = false;\n\n      if (data.length === 0) {\n        this.emit('conclude', 1005, EMPTY_BUFFER);\n        this.end();\n      } else {\n        const code = data.readUInt16BE(0);\n\n        if (!isValidStatusCode(code)) {\n          return error(\n            RangeError,\n            `invalid status code ${code}`,\n            true,\n            1002,\n            'WS_ERR_INVALID_CLOSE_CODE'\n          );\n        }\n\n        const buf = new FastBuffer(\n          data.buffer,\n          data.byteOffset + 2,\n          data.length - 2\n        );\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          return error(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n        }\n\n        this.emit('conclude', code, buf);\n        this.end();\n      }\n    } else if (this._opcode === 0x09) {\n      this.emit('ping', data);\n    } else {\n      this.emit('pong', data);\n    }\n\n    this._state = GET_INFO;\n  }\n}\n\nmodule.exports = Receiver;\n\n/**\n * Builds an error object.\n *\n * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n * @param {String} message The error message\n * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n *     `message`\n * @param {Number} statusCode The status code\n * @param {String} errorCode The exposed error code\n * @return {(Error|RangeError)} The error\n * @private\n */\nfunction error(ErrorCtor, message, prefix, statusCode, errorCode) {\n  const err = new ErrorCtor(\n    prefix ? `Invalid WebSocket frame: ${message}` : message\n  );\n\n  Error.captureStackTrace(err, error);\n  err.code = errorCode;\n  err[kStatusCode] = statusCode;\n  return err;\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls$\" }] */\n\n'use strict';\n\nconst net = require('net');\nconst tls = require('tls');\nconst { randomFillSync } = require('crypto');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst { EMPTY_BUFFER } = require('./constants');\nconst { isValidStatusCode } = require('./validation');\nconst { mask: applyMask, toBuffer } = require('./buffer-util');\n\nconst kByteLength = Symbol('kByteLength');\nconst maskBuffer = Buffer.alloc(4);\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   * @param {Function} [generateMask] The function used to generate the masking\n   *     key\n   */\n  constructor(socket, extensions, generateMask) {\n    this._extensions = extensions || {};\n\n    if (generateMask) {\n      this._generateMask = generateMask;\n      this._maskBuffer = Buffer.alloc(4);\n    }\n\n    this._socket = socket;\n\n    this._firstFragment = true;\n    this._compress = false;\n\n    this._bufferedBytes = 0;\n    this._deflating = false;\n    this._queue = [];\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {(Buffer|String)} data The data to frame\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {(Buffer|String)[]} The framed data\n   * @public\n   */\n  static frame(data, options) {\n    let mask;\n    let merge = false;\n    let offset = 2;\n    let skipMasking = false;\n\n    if (options.mask) {\n      mask = options.maskBuffer || maskBuffer;\n\n      if (options.generateMask) {\n        options.generateMask(mask);\n      } else {\n        randomFillSync(mask, 0, 4);\n      }\n\n      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\n      offset = 6;\n    }\n\n    let dataLength;\n\n    if (typeof data === 'string') {\n      if (\n        (!options.mask || skipMasking) &&\n        options[kByteLength] !== undefined\n      ) {\n        dataLength = options[kByteLength];\n      } else {\n        data = Buffer.from(data);\n        dataLength = data.length;\n      }\n    } else {\n      dataLength = data.length;\n      merge = options.mask && options.readOnly && !skipMasking;\n    }\n\n    let payloadLength = dataLength;\n\n    if (dataLength >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (dataLength > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\n\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    target[1] = payloadLength;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(dataLength, 2);\n    } else if (payloadLength === 127) {\n      target[2] = target[3] = 0;\n      target.writeUIntBE(dataLength, 4, 6);\n    }\n\n    if (!options.mask) return [target, data];\n\n    target[1] |= 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (skipMasking) return [target, data];\n\n    if (merge) {\n      applyMask(data, mask, target, offset, dataLength);\n      return [target];\n    }\n\n    applyMask(data, mask, data, 0, dataLength);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {(String|Buffer)} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  close(code, data, mask, cb) {\n    let buf;\n\n    if (code === undefined) {\n      buf = EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || !data.length) {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0);\n    } else {\n      const length = Buffer.byteLength(data);\n\n      if (length > 123) {\n        throw new RangeError('The message must not be greater than 123 bytes');\n      }\n\n      buf = Buffer.allocUnsafe(2 + length);\n      buf.writeUInt16BE(code, 0);\n\n      if (typeof data === 'string') {\n        buf.write(data, 2);\n      } else {\n        buf.set(data, 2);\n      }\n    }\n\n    const options = {\n      [kByteLength]: buf.length,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x08,\n      readOnly: false,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, buf, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(buf, options), cb);\n    }\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  ping(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x09,\n      readOnly,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  pong(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x0a,\n      readOnly,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  send(data, options, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    let opcode = options.binary ? 2 : 1;\n    let rsv1 = options.compress;\n\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (\n        rsv1 &&\n        perMessageDeflate &&\n        perMessageDeflate.params[\n          perMessageDeflate._isServer\n            ? 'server_no_context_takeover'\n            : 'client_no_context_takeover'\n        ]\n      ) {\n        rsv1 = byteLength >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    if (perMessageDeflate) {\n      const opts = {\n        [kByteLength]: byteLength,\n        fin: options.fin,\n        generateMask: this._generateMask,\n        mask: options.mask,\n        maskBuffer: this._maskBuffer,\n        opcode,\n        readOnly,\n        rsv1\n      };\n\n      if (this._deflating) {\n        this.enqueue([this.dispatch, data, this._compress, opts, cb]);\n      } else {\n        this.dispatch(data, this._compress, opts, cb);\n      }\n    } else {\n      this.sendFrame(\n        Sender.frame(data, {\n          [kByteLength]: byteLength,\n          fin: options.fin,\n          generateMask: this._generateMask,\n          mask: options.mask,\n          maskBuffer: this._maskBuffer,\n          opcode,\n          readOnly,\n          rsv1: false\n        }),\n        cb\n      );\n    }\n  }\n\n  /**\n   * Dispatches a message.\n   *\n   * @param {(Buffer|String)} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    this._bufferedBytes += options[kByteLength];\n    this._deflating = true;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      if (this._socket.destroyed) {\n        const err = new Error(\n          'The socket was closed while data was being compressed'\n        );\n\n        if (typeof cb === 'function') cb(err);\n\n        for (let i = 0; i < this._queue.length; i++) {\n          const params = this._queue[i];\n          const callback = params[params.length - 1];\n\n          if (typeof callback === 'function') callback(err);\n        }\n\n        return;\n      }\n\n      this._bufferedBytes -= options[kByteLength];\n      this._deflating = false;\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue() {\n    while (!this._deflating && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[3][kByteLength];\n      Reflect.apply(params[0], this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue(params) {\n    this._bufferedBytes += params[3][kByteLength];\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.cork();\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n      this._socket.uncork();\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\n\nmodule.exports = Sender;\n","'use strict';\n\nconst { Duplex } = require('stream');\n\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */\nfunction createWebSocketStream(ws, options) {\n  let terminateOnDestroy = true;\n\n  const duplex = new Duplex({\n    ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n\n  ws.on('message', function message(msg, isBinary) {\n    const data =\n      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n\n    if (!duplex.push(data)) ws.pause();\n  });\n\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return;\n\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n    //\n    // - If the `'error'` event is emitted before the `'open'` event, then\n    //   `ws.terminate()` is a noop as no socket is assigned.\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\n    //   event of the `Receiver` object. The listener already closes the\n    //   connection by calling `ws.close()`. This allows a close frame to be\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\n    //   then the close frame might not be sent.\n    terminateOnDestroy = false;\n    duplex.destroy(err);\n  });\n\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n\n    duplex.push(null);\n  });\n\n  duplex._destroy = function (err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n\n    let called = false;\n\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n\n    if (terminateOnDestroy) ws.terminate();\n  };\n\n  duplex._final = function (callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    }\n\n    // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n    if (ws._socket === null) return;\n\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n      ws.close();\n    }\n  };\n\n  duplex._read = function () {\n    if (ws.isPaused) ws.resume();\n  };\n\n  duplex._write = function (chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n\n    ws.send(chunk, callback);\n  };\n\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\n\nmodule.exports = createWebSocketStream;\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\n *\n * @param {String} header The field value of the header\n * @return {Set} The subprotocol names\n * @public\n */\nfunction parse(header) {\n  const protocols = new Set();\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (i; i < header.length; i++) {\n    const code = header.charCodeAt(i);\n\n    if (end === -1 && tokenChars[code] === 1) {\n      if (start === -1) start = i;\n    } else if (\n      i !== 0 &&\n      (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n    ) {\n      if (end === -1 && start !== -1) end = i;\n    } else if (code === 0x2c /* ',' */) {\n      if (start === -1) {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n\n      if (end === -1) end = i;\n\n      const protocol = header.slice(start, end);\n\n      if (protocols.has(protocol)) {\n        throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n      }\n\n      protocols.add(protocol);\n      start = end = -1;\n    } else {\n      throw new SyntaxError(`Unexpected character at index ${i}`);\n    }\n  }\n\n  if (start === -1 || end !== -1) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  const protocol = header.slice(start, i);\n\n  if (protocols.has(protocol)) {\n    throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n  }\n\n  protocols.add(protocol);\n  return protocols;\n}\n\nmodule.exports = { parse };\n","'use strict';\n\nconst { isUtf8 } = require('buffer');\n\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\n];\n\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */\nfunction isValidStatusCode(code) {\n  return (\n    (code >= 1000 &&\n      code <= 1014 &&\n      code !== 1004 &&\n      code !== 1005 &&\n      code !== 1006) ||\n    (code >= 3000 && code <= 4999)\n  );\n}\n\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */\nfunction _isValidUTF8(buf) {\n  const len = buf.length;\n  let i = 0;\n\n  while (i < len) {\n    if ((buf[i] & 0x80) === 0) {\n      // 0xxxxxxx\n      i++;\n    } else if ((buf[i] & 0xe0) === 0xc0) {\n      // 110xxxxx 10xxxxxx\n      if (\n        i + 1 === len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i] & 0xfe) === 0xc0 // Overlong\n      ) {\n        return false;\n      }\n\n      i += 2;\n    } else if ((buf[i] & 0xf0) === 0xe0) {\n      // 1110xxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 2 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong\n        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)\n      ) {\n        return false;\n      }\n\n      i += 3;\n    } else if ((buf[i] & 0xf8) === 0xf0) {\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 3 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i + 3] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong\n        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||\n        buf[i] > 0xf4 // > U+10FFFF\n      ) {\n        return false;\n      }\n\n      i += 4;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = {\n  isValidStatusCode,\n  isValidUTF8: _isValidUTF8,\n  tokenChars\n};\n\nif (isUtf8) {\n  module.exports.isValidUTF8 = function (buf) {\n    return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);\n  };\n} /* istanbul ignore else  */ else if (!process.env.WS_NO_UTF_8_VALIDATE) {\n  try {\n    const isValidUTF8 = require('utf-8-validate');\n\n    module.exports.isValidUTF8 = function (buf) {\n      return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);\n    };\n  } catch (e) {\n    // Continue regardless of the error.\n  }\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls|https$\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst http = require('http');\nconst https = require('https');\nconst net = require('net');\nconst tls = require('tls');\nconst { createHash } = require('crypto');\n\nconst extension = require('./extension');\nconst PerMessageDeflate = require('./permessage-deflate');\nconst subprotocol = require('./subprotocol');\nconst WebSocket = require('./websocket');\nconst { GUID, kWebSocket } = require('./constants');\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\n   *     class to use. It must be the `WebSocket` class or class that extends it\n   * @param {Function} [callback] A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = {\n      maxPayload: 100 * 1024 * 1024,\n      skipUTF8Validation: false,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      WebSocket,\n      ...options\n    };\n\n    if (\n      (options.port == null && !options.server && !options.noServer) ||\n      (options.port != null && (options.server || options.noServer)) ||\n      (options.server && options.noServer)\n    ) {\n      throw new TypeError(\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\n          'must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      const emitConnection = this.emit.bind(this, 'connection');\n\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, emitConnection);\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) {\n      this.clients = new Set();\n      this._shouldEmitClose = false;\n    }\n\n    this.options = options;\n    this._state = RUNNING;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Stop the server from accepting new connections and emit the `'close'` event\n   * when all existing connections are closed.\n   *\n   * @param {Function} [cb] A one-time listener for the `'close'` event\n   * @public\n   */\n  close(cb) {\n    if (this._state === CLOSED) {\n      if (cb) {\n        this.once('close', () => {\n          cb(new Error('The server is not running'));\n        });\n      }\n\n      process.nextTick(emitClose, this);\n      return;\n    }\n\n    if (cb) this.once('close', cb);\n\n    if (this._state === CLOSING) return;\n    this._state = CLOSING;\n\n    if (this.options.noServer || this.options.server) {\n      if (this._server) {\n        this._removeListeners();\n        this._removeListeners = this._server = null;\n      }\n\n      if (this.clients) {\n        if (!this.clients.size) {\n          process.nextTick(emitClose, this);\n        } else {\n          this._shouldEmitClose = true;\n        }\n      } else {\n        process.nextTick(emitClose, this);\n      }\n    } else {\n      const server = this._server;\n\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // The HTTP/S server was created internally. Close it, and rely on its\n      // `'close'` event.\n      //\n      server.close(() => {\n        emitClose(this);\n      });\n    }\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key = req.headers['sec-websocket-key'];\n    const version = +req.headers['sec-websocket-version'];\n\n    if (req.method !== 'GET') {\n      const message = 'Invalid HTTP method';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);\n      return;\n    }\n\n    if (req.headers.upgrade.toLowerCase() !== 'websocket') {\n      const message = 'Invalid Upgrade header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (!key || !keyRegex.test(key)) {\n      const message = 'Missing or invalid Sec-WebSocket-Key header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (version !== 8 && version !== 13) {\n      const message = 'Missing or invalid Sec-WebSocket-Version header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (!this.shouldHandle(req)) {\n      abortHandshake(socket, 400);\n      return;\n    }\n\n    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\n    let protocols = new Set();\n\n    if (secWebSocketProtocol !== undefined) {\n      try {\n        protocols = subprotocol.parse(secWebSocketProtocol);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Protocol header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n    }\n\n    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\n    const extensions = {};\n\n    if (\n      this.options.perMessageDeflate &&\n      secWebSocketExtensions !== undefined\n    ) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = extension.parse(secWebSocketExtensions);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        const message =\n          'Invalid or unacceptable Sec-WebSocket-Extensions header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.socket.authorized || req.socket.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(\n            extensions,\n            key,\n            protocols,\n            req,\n            socket,\n            head,\n            cb\n          );\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {Object} extensions The accepted extensions\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Set} protocols The subprotocols\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error(\n        'server.handleUpgrade() was called more than once with the same ' +\n          'socket, possibly due to a misconfiguration'\n      );\n    }\n\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new this.options.WebSocket(null);\n\n    if (protocols.size) {\n      //\n      // Optionally call external protocol selection handler.\n      //\n      const protocol = this.options.handleProtocols\n        ? this.options.handleProtocols(protocols, req)\n        : protocols.values().next().value;\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws._protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, {\n      maxPayload: this.options.maxPayload,\n      skipUTF8Validation: this.options.skipUTF8Validation\n    });\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => {\n        this.clients.delete(ws);\n\n        if (this._shouldEmitClose && !this.clients.size) {\n          process.nextTick(emitClose, this);\n        }\n      });\n    }\n\n    cb(ws, req);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server._state = CLOSED;\n  server.emit('close');\n}\n\n/**\n * Handle socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  //\n  // The socket is writable unless the user destroyed or ended it before calling\n  // `server.handleUpgrade()` or in the `verifyClient` function, which is a user\n  // error. Handling this does not make much sense as the worst that can happen\n  // is that some of the data written by the user might be discarded due to the\n  // call to `socket.end()` below, which triggers an `'error'` event that in\n  // turn causes the socket to be destroyed.\n  //\n  message = message || http.STATUS_CODES[code];\n  headers = {\n    Connection: 'close',\n    'Content-Type': 'text/html',\n    'Content-Length': Buffer.byteLength(message),\n    ...headers\n  };\n\n  socket.once('finish', socket.destroy);\n\n  socket.end(\n    `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n      Object.keys(headers)\n        .map((h) => `${h}: ${headers[h]}`)\n        .join('\\r\\n') +\n      '\\r\\n\\r\\n' +\n      message\n  );\n}\n\n/**\n * Emit a `'wsClientError'` event on a `WebSocketServer` if there is at least\n * one listener for it, otherwise call `abortHandshake()`.\n *\n * @param {WebSocketServer} server The WebSocket server\n * @param {http.IncomingMessage} req The request object\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} message The HTTP response body\n * @private\n */\nfunction abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {\n  if (server.listenerCount('wsClientError')) {\n    const err = new Error(message);\n    Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);\n\n    server.emit('wsClientError', err, socket, req);\n  } else {\n    abortHandshake(socket, code, message);\n  }\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Readable$\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst https = require('https');\nconst http = require('http');\nconst net = require('net');\nconst tls = require('tls');\nconst { randomBytes, createHash } = require('crypto');\nconst { Readable } = require('stream');\nconst { URL } = require('url');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst Receiver = require('./receiver');\nconst Sender = require('./sender');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kForOnEventAttribute,\n  kListener,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = require('./constants');\nconst {\n  EventTarget: { addEventListener, removeEventListener }\n} = require('./event-target');\nconst { format, parse } = require('./extension');\nconst { toBuffer } = require('./buffer-util');\n\nconst closeTimeout = 30 * 1000;\nconst kAborted = Symbol('kAborted');\nconst protocolVersions = [8, 13];\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this._binaryType = BINARY_TYPES[0];\n    this._closeCode = 1006;\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = EMPTY_BUFFER;\n    this._closeTimer = null;\n    this._extensions = {};\n    this._paused = false;\n    this._protocol = '';\n    this._readyState = WebSocket.CONNECTING;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (protocols === undefined) {\n        protocols = [];\n      } else if (!Array.isArray(protocols)) {\n        if (typeof protocols === 'object' && protocols !== null) {\n          options = protocols;\n          protocols = [];\n        } else {\n          protocols = [protocols];\n        }\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._isServer = true;\n    }\n  }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n\n    return this._socket._writableState.length + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get isPaused() {\n    return this._paused;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onclose() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onerror() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onopen() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onmessage() {\n    return null;\n  }\n\n  /**\n   * @type {String}\n   */\n  get protocol() {\n    return this._protocol;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get readyState() {\n    return this._readyState;\n  }\n\n  /**\n   * @type {String}\n   */\n  get url() {\n    return this._url;\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Object} options Options object\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */\n  setSocket(socket, head, options) {\n    const receiver = new Receiver({\n      binaryType: this.binaryType,\n      extensions: this._extensions,\n      isServer: this._isServer,\n      maxPayload: options.maxPayload,\n      skipUTF8Validation: options.skipUTF8Validation\n    });\n\n    this._sender = new Sender(socket, this._extensions, options.generateMask);\n    this._receiver = receiver;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    socket.setTimeout(0);\n    socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this._readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    if (!this._socket) {\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this._readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {(String|Buffer)} [data] The reason why the connection is\n   *     closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      abortHandshake(this, this._req, msg);\n      return;\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (\n        this._closeFrameSent &&\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\n      ) {\n        this._socket.end();\n      }\n\n      return;\n    }\n\n    this._readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (\n        this._closeFrameReceived ||\n        this._receiver._writableState.errorEmitted\n      ) {\n        this._socket.end();\n      }\n    });\n\n    //\n    // Specify a timeout for the closing handshake to complete.\n    //\n    this._closeTimer = setTimeout(\n      this._socket.destroy.bind(this._socket),\n      closeTimeout\n    );\n  }\n\n  /**\n   * Pause the socket.\n   *\n   * @public\n   */\n  pause() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = true;\n    this._socket.pause();\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Resume the socket.\n   *\n   * @public\n   */\n  resume() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = false;\n    if (!this._receiver._writableState.needDrain) this._socket.resume();\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      abortHandshake(this, this._req, msg);\n      return;\n    }\n\n    if (this._socket) {\n      this._readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n[\n  'binaryType',\n  'bufferedAmount',\n  'extensions',\n  'isPaused',\n  'protocol',\n  'readyState',\n  'url'\n].forEach((property) => {\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    enumerable: true,\n    get() {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) return listener[kListener];\n      }\n\n      return null;\n    },\n    set(handler) {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) {\n          this.removeListener(method, listener);\n          break;\n        }\n      }\n\n      if (typeof handler !== 'function') return;\n\n      this.addEventListener(method, handler, {\n        [kForOnEventAttribute]: true\n      });\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {Array} protocols The subprotocols\n * @param {Object} [options] Connection options\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Function} [options.generateMask] The function used to generate the\n *     masking key\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n *     not to skip UTF-8 validation for text and close messages\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    skipUTF8Validation: false,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    createConnection: undefined,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: 'GET',\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  let parsedUrl;\n\n  if (address instanceof URL) {\n    parsedUrl = address;\n    websocket._url = address.href;\n  } else {\n    try {\n      parsedUrl = new URL(address);\n    } catch (e) {\n      throw new SyntaxError(`Invalid URL: ${address}`);\n    }\n\n    websocket._url = address;\n  }\n\n  const isSecure = parsedUrl.protocol === 'wss:';\n  const isIpcUrl = parsedUrl.protocol === 'ws+unix:';\n  let invalidUrlMessage;\n\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isIpcUrl) {\n    invalidUrlMessage =\n      'The URL\\'s protocol must be one of \"ws:\", \"wss:\", or \"ws+unix:\"';\n  } else if (isIpcUrl && !parsedUrl.pathname) {\n    invalidUrlMessage = \"The URL's pathname is empty\";\n  } else if (parsedUrl.hash) {\n    invalidUrlMessage = 'The URL contains a fragment identifier';\n  }\n\n  if (invalidUrlMessage) {\n    const err = new SyntaxError(invalidUrlMessage);\n\n    if (websocket._redirects === 0) {\n      throw err;\n    } else {\n      emitErrorAndClose(websocket, err);\n      return;\n    }\n  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const request = isSecure ? https.request : http.request;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    ...opts.headers,\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket'\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\n      false,\n      opts.maxPayload\n    );\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols.length) {\n    for (const protocol of protocols) {\n      if (\n        typeof protocol !== 'string' ||\n        !subprotocolRegex.test(protocol) ||\n        protocolSet.has(protocol)\n      ) {\n        throw new SyntaxError(\n          'An invalid or duplicated subprotocol was specified'\n        );\n      }\n\n      protocolSet.add(protocol);\n    }\n\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isIpcUrl) {\n    const parts = opts.path.split(':');\n\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  let req;\n\n  if (opts.followRedirects) {\n    if (websocket._redirects === 0) {\n      websocket._originalIpc = isIpcUrl;\n      websocket._originalSecure = isSecure;\n      websocket._originalHostOrSocketPath = isIpcUrl\n        ? opts.socketPath\n        : parsedUrl.host;\n\n      const headers = options && options.headers;\n\n      //\n      // Shallow copy the user provided options so that headers can be changed\n      // without mutating the original object.\n      //\n      options = { ...options, headers: {} };\n\n      if (headers) {\n        for (const [key, value] of Object.entries(headers)) {\n          options.headers[key.toLowerCase()] = value;\n        }\n      }\n    } else if (websocket.listenerCount('redirect') === 0) {\n      const isSameHost = isIpcUrl\n        ? websocket._originalIpc\n          ? opts.socketPath === websocket._originalHostOrSocketPath\n          : false\n        : websocket._originalIpc\n        ? false\n        : parsedUrl.host === websocket._originalHostOrSocketPath;\n\n      if (!isSameHost || (websocket._originalSecure && !isSecure)) {\n        //\n        // Match curl 7.77.0 behavior and drop the following headers. These\n        // headers are also dropped when following a redirect to a subdomain.\n        //\n        delete opts.headers.authorization;\n        delete opts.headers.cookie;\n\n        if (!isSameHost) delete opts.headers.host;\n\n        opts.auth = undefined;\n      }\n    }\n\n    //\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n    // If the `Authorization` header is set, then there is nothing to do as it\n    // will take precedence.\n    //\n    if (opts.auth && !options.headers.authorization) {\n      options.headers.authorization =\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\n    }\n\n    req = websocket._req = request(opts);\n\n    if (websocket._redirects) {\n      //\n      // Unlike what is done for the `'upgrade'` event, no early exit is\n      // triggered here if the user calls `websocket.close()` or\n      // `websocket.terminate()` from a listener of the `'redirect'` event. This\n      // is because the user can also call `request.destroy()` with an error\n      // before calling `websocket.close()` or `websocket.terminate()` and this\n      // would result in an error being emitted on the `request` object with no\n      // `'error'` event listeners attached.\n      //\n      websocket.emit('redirect', websocket.url, req);\n    }\n  } else {\n    req = websocket._req = request(opts);\n  }\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', (err) => {\n    if (req === null || req[kAborted]) return;\n\n    req = websocket._req = null;\n    emitErrorAndClose(websocket, err);\n  });\n\n  req.on('response', (res) => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (\n      location &&\n      opts.followRedirects &&\n      statusCode >= 300 &&\n      statusCode < 400\n    ) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n\n      let addr;\n\n      try {\n        addr = new URL(location, address);\n      } catch (e) {\n        const err = new SyntaxError(`Invalid URL: ${location}`);\n        emitErrorAndClose(websocket, err);\n        return;\n      }\n\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(\n        websocket,\n        req,\n        `Unexpected server response: ${res.statusCode}`\n      );\n    }\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the\n    // `'upgrade'` event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n\n    req = websocket._req = null;\n\n    if (res.headers.upgrade.toLowerCase() !== 'websocket') {\n      abortHandshake(websocket, socket, 'Invalid Upgrade header');\n      return;\n    }\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    let protError;\n\n    if (serverProt !== undefined) {\n      if (!protocolSet.size) {\n        protError = 'Server sent a subprotocol but none was requested';\n      } else if (!protocolSet.has(serverProt)) {\n        protError = 'Server sent an invalid subprotocol';\n      }\n    } else if (protocolSet.size) {\n      protError = 'Server sent no subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket._protocol = serverProt;\n\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n\n    if (secWebSocketExtensions !== undefined) {\n      if (!perMessageDeflate) {\n        const message =\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\n          'was requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      let extensions;\n\n      try {\n        extensions = parse(secWebSocketExtensions);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      const extensionNames = Object.keys(extensions);\n\n      if (\n        extensionNames.length !== 1 ||\n        extensionNames[0] !== PerMessageDeflate.extensionName\n      ) {\n        const message = 'Server indicated an extension that was not requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      try {\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      websocket._extensions[PerMessageDeflate.extensionName] =\n        perMessageDeflate;\n    }\n\n    websocket.setSocket(socket, head, {\n      generateMask: opts.generateMask,\n      maxPayload: opts.maxPayload,\n      skipUTF8Validation: opts.skipUTF8Validation\n    });\n  });\n\n  if (opts.finishRequest) {\n    opts.finishRequest(req, websocket);\n  } else {\n    req.end();\n  }\n}\n\n/**\n * Emit the `'error'` and `'close'` events.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {Error} The error to emit\n * @private\n */\nfunction emitErrorAndClose(websocket, err) {\n  websocket._readyState = WebSocket.CLOSING;\n  websocket.emit('error', err);\n  websocket.emitClose();\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n\n  if (!options.servername && options.servername !== '') {\n    options.servername = net.isIP(options.host) ? '' : options.host;\n  }\n\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket._readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream[kAborted] = true;\n    stream.abort();\n\n    if (stream.socket && !stream.socket.destroyed) {\n      //\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n      // called after the request completed. See\n      // https://github.com/websockets/ws/issues/1869.\n      //\n      stream.socket.destroy();\n    }\n\n    process.nextTick(emitErrorAndClose, websocket, err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = toBuffer(data).length;\n\n    //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\n    else websocket._bufferedAmount += length;\n  }\n\n  if (cb) {\n    const err = new Error(\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\n        `(${readyStates[websocket.readyState]})`\n    );\n    process.nextTick(cb, err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {Buffer} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (websocket._socket[kWebSocket] === undefined) return;\n\n  websocket._socket.removeListener('data', socketOnData);\n  process.nextTick(resume, websocket._socket);\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  const websocket = this[kWebSocket];\n\n  if (!websocket.isPaused) websocket._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._socket[kWebSocket] !== undefined) {\n    websocket._socket.removeListener('data', socketOnData);\n\n    //\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n    // https://github.com/websockets/ws/issues/1940.\n    //\n    process.nextTick(resume, websocket._socket);\n\n    websocket.close(err[kStatusCode]);\n  }\n\n  websocket.emit('error', err);\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n * @param {Boolean} isBinary Specifies whether the message is binary or not\n * @private\n */\nfunction receiverOnMessage(data, isBinary) {\n  this[kWebSocket].emit('message', data, isBinary);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  websocket.pong(data, !websocket._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */\nfunction resume(stream) {\n  stream.resume();\n}\n\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('data', socketOnData);\n  this.removeListener('end', socketOnEnd);\n\n  websocket._readyState = WebSocket.CLOSING;\n\n  let chunk;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk.\n  //\n  if (\n    !this._readableState.endEmitted &&\n    !websocket._closeFrameReceived &&\n    !websocket._receiver._writableState.errorEmitted &&\n    (chunk = websocket._socket.read()) !== null\n  ) {\n    websocket._receiver.write(chunk);\n  }\n\n  websocket._receiver.end();\n\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket._readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  if (websocket) {\n    websocket._readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}\n","module.exports = require(\"bufferutil\");","module.exports = require(\"utf-8-validate\");","module.exports = require(\"buffer\");","module.exports = require(\"constants\");","module.exports = require(\"crypto\");","module.exports = require(\"dns\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"stream\");","module.exports = require(\"tls\");","module.exports = require(\"url\");","module.exports = require(\"util\");","module.exports = require(\"zlib\");","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6010);\n"],"names":["module","exports","Base64","Bits","Convert","Hex","Long","KEY_STR","ENC_LUT","DecodeError","Error","LegacyEncoder","base64_encode","input","output","i","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","length","base64_decode","String","fromCharCode","isNode","window","hasBuffer","Buffer","hasBlob","Blob","BufferEncoder","str","from","toString","WindowEncoder","b","a","encode","decode","get","val","shift","numBits","set","dataIn","curMask","ErrorSubcode","OperationError","BufferImpl","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","UNSIGNED_LSHIFT_24","ARRAY_BUFFER_CONVERT_CHUNK","stringToUint8Array","data","dataLength","arrayBuf","ArrayBuffer","uint8Array","Uint8Array","int32ToStr","int32","strToUInt32","arrayBufferToString","ab","len","byteLength","u8","apply","k","r","subarray","stringToArrayBuffer","buffer","int8ToStr","int8","strToInt8","int16ToStr","int16","strToInt16","int24ToStr","int24","strToInt24","strToInt32","int64ToStr","int64","high","low","strToUInt64","fromBits","substr","byteArrayToStr","byteArray","slice","strToByteArray","result","strToHexArray","Array","prototype","map","call","split","c","ucs2ToUtf8","ucs2","unescape","encodeURIComponent","utf8ToUcs2","utf8","decodeURIComponent","escape","anythingToBuffer","value","isBuffer","byteOffset","PARAMETER_OUT_OF_RANGE","numToHex","n","s","formatHexString","obj","isArray","join","_","Debug","Destination","ESKit","Factory","FSM","Log","Message","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","FactoryLib","SolclientFactory","SolclientFactoryProfiles","SolclientFactoryProperties","DestinationType","Topic","NotImplementedError","RequestError","RequestEventCode","makeIterator","ConsoleLogImpl","LogImpl","LogLevel","MessageCacheStatus","MessageDeliveryModeType","MessageDumpFlag","MessageType","MessageUserCosType","ReplicationGroupMessageId","MessageConsumer","MessageConsumerAcknowledgeMode","MessageConsumerEventName","MessageConsumerProperties","QueueBrowser","QueueBrowserEventName","QueueBrowserProperties","ReplayStartLocation","ReplayStartLocationBeginning","MessagePublisherAcknowledgeMode","MessagePublisherProperties","AbstractQueueDescriptor","QueueAccessType","QueueDescriptor","QueueDiscardBehavior","QueuePermissions","QueueProperties","QueueType","SDTField","SDTFieldType","SDTMapContainer","SDTStreamContainer","SDTUnsupportedValueError","SDTValueErrorSubcode","AuthenticationScheme","CapabilityType","MessageRxCBInfo","MutableSessionProperty","SessionEvent","SessionEventCBInfo","SessionEventCode","SessionProperties","SessionState","SslDowngrade","CacheCBInfo","CacheLiveDataAction","CacheRequestResult","CacheReturnCode","CacheReturnSubcode","CacheSession","CacheSessionProperties","StatType","TransportError","TransportProtocol","Version","solace","_internal","Object","assign","PRINTABLE_LUT","tmp","formatDumpBytes","showDecode","leftPadding","StringBuffer","StringUtils","isEmpty","padLeft","padRight","ascii","line","lineBytes","dataLen","ccode","append","clear","parseSMFStream","Codec","Decode","decodeCompoundMessage","LOG_WARN","LOG_ERROR","pos","incomingMsg","smf","smfHeader","smf_protocol","messageLength","DestinationFromNetwork","DestinationUtil","Parameter","Queue","createTopicDestination","createFactory","topicName","isString","createFromName","createTopic","createDurableQueueDestination","queueName","createFromLocalName","QUEUE_PREFIX","QUEUE_PREFIX_LEN","TEMPORARY_QUEUE_PREFIX","createDestinationFromName","networkTopicName","networkTopicBytes","undefined","spec","name","bytes","encodeBytes","startsWith","offset","type","QUEUE","TEMPORARY_QUEUE","createDestinationFromBytes","decodeBytes","Enum","TOPIC","new","_setCanonical","SolclientFactoryLib","SubscriptionInfo","UUID","ProfileBinding","toSafeChars","stripNullTerminate","DESTINATION_PREFIX_FROM_TYPE","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","exceptionCreator","bind","error","nameLength","bytesLength","isWildcarded","topicUtf8Encode","prefix","networkName","createTemporaryName","vrid","id","generateUUID","describe","validateAndEncode","constError","subscriptionInfo","keys","some","prefixType","errorConst","subInfo","subInfoConst","parseFromName","constructor","this","_name","_type","_bytes","_offset","isValidated","_isValidated","_isWildcarded","_subscriptionInfo","getName","getType","getBytes","getOffset","validate","_error","getSubscriptionInfo","util_inspect","equals","other","valueOf","DestinationUtilLib","assert","super","static","encoding","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","NOEXPORT_PREFIX","index","isNoExport","SHARE_PREFIX","shareGroup","groupIndex","isShare","LEVEL_DELIMETER_LEN","indexOf","substring","LEVEL_DELIMETER","dispatchTopicIndex","parse","layers","parseLayers","constOffset","constResult","subscriptionStringParse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","apiEnv","envObject","target","ErrorResponseSubcodeMapper","SolaceError","makeMap","SC","ROOT_MAPPING","CLIENT_NAME_INVALID","MESSAGE_TOO_LARGE","INACTIVITY_TIMEOUT","SUBSCRIPTION_TOO_MANY","NOLOCAL_DISCARD","OUT_OF_RESOURCES","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_ATTRIBUTES_CONFLICT","SUBSCRIPTION_NOT_FOUND","SUBSCRIPTION_INVALID","UNKNOWN_TRANSPORT_SESSION_ID","XML_PARSE_ERROR","LOGIN_FAILURE","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","CLIENT_NAME_ALREADY_IN_USE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","MESSAGE_VPN_NOT_ALLOWED","PUBLISH_ACL_DENIED","REPLICATION_IS_STANDBY","SELECTOR_DOES_NOT_MATCH","SUBSCRIPTION_ACL_DENIED","SUBSCRIPTION_DOES_NOT_MATCH","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","LOW_PRIORITY_MSG_CONGESTION","MESSAGE_VPN_UNAVAILABLE","GM_UNAVAILABLE","SPOOL_OVER_QUOTA","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","MAX_MESSAGE_USAGE_EXCEEDED","GM_NOT_READY","AD_MAPPING","ALREADY_BOUND","ENDPOINT_ALREADY_EXISTS","ENDPOINT_PROPERTY_MISMATCH","INVALID_DTE_NAME","INVALID_SELECTOR","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","QUEUE_NOT_FOUND","QUOTA_OUT_OF_RANGE","UNKNOWN_FLOW_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","PERMISSION_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_TEMPORARY_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","MISMATCHED_ENDPOINT_ERROR_ID","REPLAY_START_MESSAGE_NOT_AVAILABLE","PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED","PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED","TOPIC_ENDPOINT_SHUTDOWN","MAX_CLIENTS_FOR_TE","MAX_CLIENTS_FOR_QUEUE","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","NO_SUBSCRIPTION_MATCH","QUEUE_SHUTDOWN","UNKNOWN_TOPIC_ENDPOINT_NAME","UNKNOWN_QUEUE_NAME","REPLAY_DISABLED","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_STARTED","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_START_TIME_NOT_AVAILABLE","SYNC_REPLICATION_INELIGIBLE","getSubcodeMappingInner","root","respErrorCode","respStr","codeMap","searchKey","toLowerCase","foundKey","find","mapKey","getSubcodeMapping","UNKNOWN_ERROR","getErrorSubcode","getADErrorSubcode","NO_ERROR","SESSION_NOT_CONNECTED","INVALID_SESSION_OPERATION","INVALID_OPERATION","TIMEOUT","PARAMETER_CONFLICT","PARAMETER_INVALID_TYPE","INTERNAL_ERROR","INSUFFICIENT_SPACE","PROTOCOL_ERROR","COMMUNICATION_ERROR","KEEP_ALIVE_FAILURE","TOPIC_MISSING","SUBSCRIPTION_ERROR_OTHER","NO_LOCAL_NOT_SUPPORTED","DATA_ERROR_OTHER","CREATE_XHR_FAILED","CONNECTION_ERROR","DATA_DECODE_ERROR","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","UNEXPECTED_UNBIND","MESSAGE_DELIVERY_MODE_MISMATCH","MESSAGE_ALREADY_ACKNOWLEDGED","CALLBACK_ERROR","FAILED_LOADING_TRUSTSTORE","FAILED_LOADING_CERTIFICATE_AND_KEY","UNRESOLVED_HOSTS","REPLAY_NOT_SUPPORTED","COMPRESSED_TLS_NOT_SUPPORTED","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","MESSAGE_ID_NOT_COMPARABLE","message","subcode","reason","SUBCODE_FROM_EC","REQUEST_ABORTED","REQUEST_TIMEOUT","eventCode","correlationKey","_eventCode","_correlationKey","requestEventCode","_requestEventCode","errorSubcode","superObj","infoStr","captureStackTrace","stack","ArrayOperations","BidiMap","Iterator","Lazy","Mixin","Resolver","SetOperations","mixin","resolve","defaultComparator","astr","bstr","insertOrdered","array","element","comparator","inplaceInsertOrdered","min","max","splice","pairs","forward","Map","reverse","forEach","p","setValues","key","enumName","instance","matches","filter","values","defineProperties","_canonical","enumerable","writable","configurable","final","descriptor","getOwnPropertyDescriptor","defineProperty","enumValue","noneValue","unknownValue","nameOf","names","Set","isEnum","strings","arr","start","end","_arr","_index","_end","deref","incr","DEFAULT_PROPERTY_OPTIONS","setPropertyValue","options","lazyProperty","evalFn","lazyProperties","lazyValue","keyValuePairs","add","targetProto","addProto","getOwnPropertyNames","source","compoundKey","trim","rawPath","path","pathArr","concat","commonSource","keySource","reduce","traversePath","inplaceUnion","setA","setB","elem","inplaceDifference","delete","inplaceIntersection","has","isSuperset","subset","every","difference","intersection","union","EventEmitter","Timer","NodeEventEmitter","ArrayUtils","flatten","includes","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","DISABLED_ACTIONS","ignore","fail","direct","emits","unsafe","formatEventName","bareEmit","emit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","emitSet","el","emitArray","buildFilter","_emits","_defaultEmitDirect","args","emitDirect","_directEventName","on","eventName","listener","_verifyListenerEvent","ret","_setEmitDirect","addListener","once","prependListener","prependOnceListener","removeAllListeners","removeListener","listenerCount","directListenerCount","setOnFirstDirectListener","firstDirect","_onFirstDirectListener","onListener","event","throwInternal","err","emitBase","_internalError","ex","formatErrorEvent","info","formattedName","innerEx","isDirect","disableEmitter","cancel","interval","onInterval","timerRef","setInterval","clearInterval","timeout","onExpire","setTimeout","clearTimeout","FactoryProfile","binding","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","legacyInstance","v10Instance","forwardInstance","_legacy","_v10","_forward","_default","version7","version10","version10_5","APIProperties","Check","getDefaultLogLevel","INFO","logLevel","logger","profile","_profile","number","_logLevel","_logger","factoryState","initializeCount","initializers","addInitializer","func","push","init","factoryProps","props","isInstanceOf","initializer","LOG_DEBUG","reset","_getInitializeCount","profiles","Flow","FlowOperation","PrivateFlowEventName","CONNECT","DISCONNECT","START","STOP","DISPOSE","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","LogFormatter","Stats","ALWAYS_OPS","flowProperties","sessionInterfaceFactory","emitterOptions","emitterOptionsFull","sessionInterface","self","sessionIdHex","flowIdDec","log","wrap","_disposing","_disposed","_userDisconnected","_properties","_sessionInterface","_stats","_privateEventEmitter","_emit","_on","_once","_removeListener","clearStats","LOG_TRACE","_operationCheck","resetStats","connect","userDisconnected","dispose","terminate","getDisposedEvent","_fsm","_midDispatch","terminateWithRunningFSM","terminateFsm","disconnect","_disconnectSession","getProperties","clone","getStat","statType","handleUncorrelatedControlMessage","incStat","processFSMEvent","processEvent","canAck","disposed","flowId","session","_session","operation","v","_isDisconnected","BIND_WAITING","FsmEvent","State","StateMachine","StateLib","FsmObject","EntryPoint","innerState","entryPointName","impl","outerState","state","parentContext","getParent","initial","transitionTo","getDestState","ExitPoint","exitPointName","extraStringInfo","getExtraStringInfo","StateContext","logPadding","getStateMachine","ancestorList","initialReaction","action","ReactionResult","caller","destState","getFinalState","getAncestorList","onInitial","external","processReactionResult","e","curContext","destStateIter","lowestCommonAncestor","onExit","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","eventQueue","finalState","handleUncaughtException","ev","exc","process","processingEvents","_onEventCompletion","getCurrentState","currentState","evt","handleEvent","curState","setPostEventAction","postEventAction","getActiveState","activeStates","isStateActive","unhandledEventReaction","handleUnhandledEvent","uncaughtExceptionReaction","extensions","reactions","entryPoints","exitPoints","extension","repeat","reaction","entryPoint","exitPoint","getEntryPointDestState","getExitPointDestState","entry","appEntryFunc","exit","appExitFunc","externalTransitionTo","transitionToEntryPoint","transitionToExitPoint","eventUnhandled","internalTransition","GlobalBinding","isEnumMember","isFunction","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","addGlobalFuncs","toUpperCase","trace","TRACE","debug","DEBUG","warn","WARN","ERROR","fatal","newLevel","Binding","formatter","_formatter","genericFunction","targetSelf","STUB","generateLogHeader","levelStr","date","Date","levelStrPadding","YY","getFullYear","MM","getMonth","DD","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","ms","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","console","global","Function","level","LogBinding","FATAL","ConsumerFlows","ConsumerFSMEvent","ConsumerFSMEventNames","MessageConsumerEvent","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","exists","ApplicationAckRingBuffer","size","_size","_insertIndex","_buffer","fill","ack","insert","beforeEvictCallback","insertIndex","inserting","evicting","front","firstIndex","rawIndex","lastIndex","callback","updateAckState","existing","_allFlows","_reconnectingFlows","_flowsById","flow","flowUp","flowDisposed","flowDown","UP","RECONNECTED","DISPOSED","RECONNECTING","DOWN","DOWN_ERROR","flows","reconnectingFlows","getFlowById","disposeAll","SESSION_UP","SESSION_UP_NO_AD","SESSION_DOWN","SESSION_DISCONNECT","FLOW_FAILED","FLOW_UP","FLOW_ACTIVE_IND","FLOW_CLOSE","FLOW_OPEN","FLOW_UNBOUND","ACK","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","CAN_SEND","TRANSPORT_ERROR","VIRTUALROUTER_NAME_CHANGED","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","details","SMFLib","ConsumerStateNames","MessageDispatcher","RgmidFactory","TransportAcks","TransportAckResult","ZERO_APP_ACK","UZERO","ConsumerFSM","consumer","properties","fsm","LOG_INFO","autoAck","acknowledgeMode","AUTO","_consumer","_acknowledgeTimeoutInMsecs","acknowledgeTimeoutInMsecs","_acknowledgeThreshold","acknowledgeThreshold","_localPreferredWindowSize","windowSize","_localMaxWindowSize","_messageDispatch","emitter","_resetRemoteConnectionState","_resetLocalConnectionState","_replayStartLocation","replayStartLocation","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","ACTIVE","INACTIVE","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","emitBindFailed","CONNECT_FAILED_ERROR","checkCapabilitiesChoicePoint","isCapable","MESSAGE_REPLAY","topicEndpointSubscription","destination","SHARED_SUBSCRIPTIONS","verifyEndpointSubscription","Unbound","createIfMissing","queueDescriptor","durable","CreateSent","BindSent","_addEventToEmit","activeIndicationEnabled","_requestStartDispatch","_requestStopDispatch","requestStopDispatchFSM","transitionToUnbound","_dispose","msg","correlationTag","getCorrelationTag","AdProtocolMessage","getCloseMessageConsumer","sendControl","enqueueRequest","handleAccidentalBind","connectTimeoutInMsecs","context","UNBOUND","emitDisabledEvent","GM_DISABLED","AwaitSessionUp","GUARANTEED_MESSAGE_CONSUME","AwaitFlowOpen","_connectAttempts","connectAttempts","UNBOUND_AWAIT_SESSION_UP","emitBindWaiting","UNBOUND_AWAIT_FLOWOPEN","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","endpoint","_endpoint","subscription","_subscription","getOpenMessageConsumer","queueProperties","noLocal","lastAcked","lastReceived","browser","endpointErrorId","partitionGroupId","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","partitionGroupIdValue","getPartitionGroupId","_clearPartitionGroupId","attrs","lastMsgIdAcked","getLastMsgIdAcked","getFlowId","accessType","x","getAccessType","EXCLUSIVE","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","respectsTTL","getRespectsTTL","activeFlow","getActiveFlow","wantFlowChangeNotify","getWantFlowChangeNotify","discardBehavior","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getEndpointErrorId","spoolerUniqueId","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","queueDiscardBehavior","permissions","BR_REPLAY_ERRORID","consumerProperties","quotaMB","maxMessageSize","maxMessageRedelivery","NONE","_active","_remoteWindowSize","eq","msgType","SMFAdProtocolMessageType","BIND","PROTOTOCOL_ERROR","header","responseCode","pm_respcode","RX_DISCARD_SMF_UNKNOWN_ELEMENT","description","pm_respstr","respEvent","BIND_SENT","newTimeout","UnbindSent","FlowUp","Reconnecting","reconnectAttempts","RBindSent","RAwaitSessionUp","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_BIND_SENT","RAwaitTimer","emitRebindFailed","RECONNECTING_AWAIT_TIMER","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","reconnectIntervalInMsecs","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","FLOW_UP_XFER","_sendAcks","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","sendUnbindRequest","_endpointClear","handleUnbindTimeout","response","handleUnbindResponse","getCurrentStateName","UNBIND","CREATE_SENT","sendCreateRequest","getCreate","handleCreateTimeout","handleCreateResponse","CREATE","acceptMessage","messageID","getGuaranteedMessageId","idstr","_fsmDispatch","RX_DISCARD_NO_MATCHING_CONSUMER","setDeliveryCount","messageSuid","_getSpoolerUniqueId","INVALID_SUID","_setSpoolerUniqueId","ackResult","tryReceive","getGuaranteedPreviousMessageId","transportAckRequired","acksPending","maxPendingAcks","OK","DUPLICATE","RX_DISCARD_DUPLICATE","_applicationAcks","_oldUnacked","_setTransportAckTimer","_sendAck","OUT_OF_ORDER","RX_DISCARD_OUT_OF_ORDER","applicationAckRequired","applicationAck","messageId","RX_ACKED","getDestination","_destination","isDisconnected","UNBOUND_AWAITING_FLOWOPEN","requestStartDispatchUser","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_flowId","requestStopDispatchUser","stop","_clearTransportAckTimer","_transportAckTimer","_unacked","createDestinationFromDescriptor","createTemporaryDestination","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","MAX_CLIENT_ACK_RANGES","bareRanges","range","forceTransportAck","g","setAcked","ackRange","maxWindowSize","Math","Number","POSITIVE_INFINITY","UNBOUND_AWAIT_ANY","CLIENT","MESSAGE","SUBSCRIPTION_OK","SUBSCRIPTION_ERROR","messageConsumerEventName","_messageConsumerEventName","_infoStr","_responseCode","_errorSubcode","_reason","QueueDescriptorValidator","QueuePropertiesValidator","APIPropertiesValidators","validateInstance","valBoolean","valInstance","valIsMember","valNumber","valRange","valTopicStringOrEmpty","valTopicEndpointSubscription","typeDesc","TOPIC_ENDPOINT","isDurable","MessageConsumerPropertiesValidator","rawProperties","hasOwnProperty","something","MAX_VALUE","QueueLib","DEFAULTS","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","_browser","_queueDescriptor","_queueProperties","_bindTimeoutInMsecs","_topicEndpointSubscription","_acknowledgeMode","_transportAcknowledgeTimeoutInMsecs","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","newValue","_noLocal","_windowSize","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","localCounter","applyProperties","superFormatter","_makeFSM","_onFlowActive","_onFlowDisconnected","_onFlowUp","getCapability","handleDataMessage","setMessageConsumer","FLOWCHANGEUPDATE","active","onVRNChanged","_accessType","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","_disposeFSM","addSubscription","topic","requestTimeout","updateQueueSubscription","success","subCode","respCode","respText","removeSubscription","queue","dispatch","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","isAcknowledged","acknowledge","messageConsumer","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","_onConsumerGMDisabled","removeMessageFromQueue","_guaranteedMsgId","_acked","base","fromNumber","fromValue","_acksPending","ZERO","prevMessageID","_lastReceived","lt","gte","_lastAcked","MessagePublisher","MessagePublisherEventName","MessagePublisherPropertiesValidator","PublisherFSMEvent","PublisherFSMEventNames","_lastSent","_next","longToString","MessageIds","lastSent","setLastSent","next","PER_MESSAGE","WINDOWED","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","GUARANTEED_MESSAGING_DOWN","REJECTED_MESSAGE","DISCONNECT_FAILED_ERROR","TRANSPORT_FULL","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","webSocket","getDefaults","enabled","connectRetryCount","_enabled","defined","_connectRetryCount","_connectTimeoutInMsecs","PublisherFSM","_bindWaiting","_onBindWaiting","_onBindFailed","_onDown","_onUp","publisher","_flowName","publisherId","_publisherId","handleAck","handleNack","ctrlMessage","nack","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","prepareAdMessageAndSend","dataMsg","isBindWaiting","RESEND_COMPLETE","smfmessage","getEventText","_eventText","SolclientSession","PublisherStateNames","TransportReturnCode","ConnectReason","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","adpMsg","smfRespHeader","OPENPUBFLOW","returnCode","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","getPublisherId","_messageIds","_unackedList","_connectReason","messages","count","_renumber","setFlowId","setPublisherId","payloadSizeLimit","MAX_GUARANTEED_MSG_SIZE","getValue","_memoized_payload","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","rxMsgObj","PublisherCloseFlowSent","PublisherUp","pEvent","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","TX_WINDOW_CLOSED","unackedList","_payload_is_memoized","_memoized_csumm","dupMsg","payloadSize","Encode","adaptMessageToSmf_payloadMemoize","_cloneNumbers","msgId","sendToTransport","NO_SPACE","setRedelivered","_startAckTimer","pop","TX_ACKS_RXED","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","list","resendIndex","m","sendData","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","TX_ACK_TIMEOUT","current","setGuaranteedPreviousMessageId","setGuaranteedMessageId","fromMsg","toMsg","_setPostEventAction","desc","_postEventAction","FAILED","MessageDumpStandardProvider","MessageDumpUtil","createMessage","createReplicationGroupMessageId","fromString","LIVE","CACHED","SUSPECT","DIRECT","PERSISTENT","NON_PERSISTENT","MSGDUMP_BRIEF","MSGDUMP_FULL","DebugLib","MessageDumpUtilLib","fpDestination","dest","fpSenderId","getSenderId","fpAppmsgType","getApplicationMessageType","fpAppMsgId","getApplicationMessageId","fpSequenceNumber","sequenceNum","getSequenceNumber","fpTopicSequenceNumber","topicSeqNo","getTopicSequenceNumber","isLong","fpCorrelationId","getCorrelationId","fpHttpContentType","fpHttpContentEncoding","fpSendTimestamp","timestamp","getSenderTimestamp","formatDate","fpRcvTimestamp","getReceiverTimestamp","fpClassOfService","getUserCos","fpDeliveryMode","getDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","getReplicationGroupMessageId","fpTimeToLive","timeToLive","getTimeToLive","mdu","d","getTime","fpExpiration","getGMExpiration","fpMessageDMQEligible","isDMQEligible","fpMessageRedelivered","isRedelivered","fpMessageDeliveryCount","getDeliveryCount","fpDiscardIndication","isDiscardIndication","fpAckImmediately","isAcknowledgeImmediately","fpElidingEligible","isElidingEligible","fpReplyMessage","isReplyMessage","fpReplyTo","replyTo","getReplyTo","fpDeliverToOne","isDeliverToOne","fpCacheMessage","getCacheStatus","fpCacheRequestId","cacheRequestId","getCacheRequestId","fpUserPropertyMap","flags","propMap","getUserPropertyMap","getKeys","detailValue","printMap","fpCorrelationTag","strValue","getCorrelationKey","fpUserData","notEmpty","getUserData","fpSdtStream","sdtFieldValue","getSdtContainer","STREAM","countItems","printStream","fpSdtMap","MAP","fpBinaryAttachment","_binaryAttachment","att","fpXmlContent","xml","getXmlContent","fpXmlMetadata","xmlMetadata","getXmlMetadata","MessageDumpStandardProviderLib","MessageDumpState","dumpProviders","providers","getOutOfRangeValue","rawData","sdtField","getSubcode","VALUE_OUTSIDE_SUPPORTED_RANGE","getSourceData","sdtMap","indent","nothing","lines","strIndent","sort","getField","BYTEARRAY","sdtStream","rewind","hasNext","getNext","DESTINATION","timeStamp","dump","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","provider","isPresent","BINARY","TEXT","COS1","COS2","COS3","SDTCodec","isBoolean","isInstanceOfOrNothing","isNumberOrNothing","isStringOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","_spoolerUniqueId","_priority","_deliveryCount","_messageType","setApplicationMessageId","_applicationMessageId","setApplicationMessageType","_applicationMessageType","getBinaryAttachment","setBinaryAttachment","_setBinaryAttachment","_cacheRequestId","_setCacheRequestID","cacheRequestID","_correlationId","setCorrelationId","setCorrelationKey","_deliverToOne","setDeliverToOne","_setDeliverToOne","setDeliveryMode","_setDeliveryMode","setDestination","_setDestination","_discardIndication","setDiscardIndication","_setDiscardIndication","_elidingEligible","setElidingEligible","_setElidingEligible","getPublisherMessageId","_publisherMsgId","setPublisherMessageId","_timeToLive","setTimeToLive","_expiration","setGMExpiration","_dmqEligible","setDMQEligible","_setDMQEligible","_guaranteedPrevMsgId","getMessageConsumer","_setSpoolerMessageId","_spoolerMessageId","smid","suid","msgid","_topicSequenceNumber","setTopicSequenceNumber","deliveryCount","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","_setCacheStatus","cacheStatus","_replyMessage","_redelivered","setAsReplyMessage","_receiverTimestamp","_replyTo","setReplyTo","_senderId","setSenderId","_senderTimestamp","setSenderTimestamp","_sequenceNumberError","_sequenceNumber","setSequenceNumber","_autoSequenceNumber","getPriority","setUserCos","_setUserCos","setPriority","_setPriority","_userData","setUserData","_setUserData","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","_setXmlContentInternal","setXmlMetadata","_setXmlMetadata","_xmlMetadata","binaryMetadataChunk","_binaryMetaChunk","meta","_smfHeader","hasAutoSequenceNumber","hasAutoSenderTimestamp","_autoSenderTimestamp","_userPropertyMap","setUserPropertyMap","setSdtContainer","container","structuredContainer","_structuredContainer","STRING","binaryAttachment","binaryAttachmentLength","parseSingleElement","validFlags","f","SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY","ReplayStartType","RMID_VERSION_1_PREFIX","validRmidHexRegex","isValue","effectiveMessageId","_replayStartValue","RGMID","_suid","_messageId","compare","otherReplicationGroupMessageId","oId","gt","hexString","toBytesBE","rgmidStr","rmidBufs","rmidHex","test","rmidBuffer","buflen","readUInt32BE","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","queueSpec","maybeAdaptFromDestination","_durable","NONEXCLUSIVE","valTopicString","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","DELETE","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","ReplayStartLocationDate","createReplayStartLocationBeginning","createReplayStartLocationDate","dateTime","BEGINNING","DATE","SDTDestType","EncodeSingleElement","IEEE754LIB","ParseSingleElement","StringToBuffer","encodeSingleElement","stringToBuffer","SDTDataTypes","EncodeHeader","tag","valueLen","byte0","strSdtLen","Stream","EncodeInteger","vIn","byteI","floor","EncodeSingleElementLib","UtilLib","encodeHeader","EncodeMap","encodeMap","sdtmap","buf","sdtfield","strKeyField","strKeyName","nullTerminate","encodeSingleElementToBuf","DestinationLib","EncodeStream","int48ToStr","encodeStream","C_2_48","pow","fieldVal","BOOL","Boolean","UINT8","UnsignedInteger","INT8","Integer","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","Char","ByteArray","FLOATTYPE","Float","toIEEE754Single","DOUBLETYPE","toIEEE754Double","NULLTYPE","Null","UNKNOWN","hdr","sdtstream","toIEEE754","ebits","fbits","bias","Infinity","abs","ln","LN2","bits","parseInt","fromIEEE754","j","NaN","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","ParseDestination","dataBuf","destType","readUInt8","destBytes","create","ParseInteger","autoDecodeVarLengthNumber","ParseFieldHeader","onebyte","elemType","lenBytes","elemLen","ParseFloat","readFloatBE","readDoubleBE","createField","readUIntBE","isSigned","readInt8","readInt16BE","readUInt16BE","readInt32BE","longValue","getNumBitsAbs","toNumber","field","setError","ParseSingleElementLib","ParseMap","datalen","mapObj","keyFieldHeader","parseFieldHeader","keyString","valueFieldHeader","valueField","addField","ParseStream","parseFloatField","parseIntegerField","parseMapAt","parseStreamAt","parseDestination","fieldHeader","elemValLen","SMFMessage","SMF_MESSAGE","streamObj","validateSdtField","_value","getValueNoThrow","_map","deleteField","typeOrField","SDTFieldLib","_stream","_writable","_readPt","sourceData","inspect","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","baseTypes","failInvalidParameter","valueType","instanceOf","ClientCapabilityType","SessionEventName","createSession","sessionProperties","messageCallbackInfo","eventCallbackInfo","BASIC","CLIENT_CERTIFICATE","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","NO_LOCAL","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_PUBLISH","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","SELECTOR","ACTIVE_CONSUMER_INDICATION","COMPRESSION","CUT_THROUGH","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","COMPRESSED_SSL","UNBIND_ACK","BR_ERRORID","PQ","CorrelatedRequest","timer","respRecvdCallback","DefaultCapabilities","createDefaultCapabilities","assumedMaxAdSize","Process","C_2_32","leftPad","GlobalContext","sessionCounter","idCounter","RandId","random","toFixed","NextSessionCounter","NextId","GenerateClientName","product","platform","GenerateUserIdentification","GenerateClientDescription","parseURL","hostListDNSFilter","dns","dnsLookupPromise","url","Promise","host","hostname","lookup","address","resolved","code","errno","syscall","urls","cb","promises","all","then","catch","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","hosts","href","connectTryCount","reconnectTryCount","connectTryCountPerHost","_mutableState","resolveHosts","succeeded","wasConnected","disconnected","hostPointer","hostTries","listTries","exhausted","lastHostInfo","getNextHost","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","connectWaitTimeInMsecs","currentHostToString","hostNumber","messageRxCBFunction","userObject","CLIENT_NAME","CLIENT_DESCRIPTION","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","P2PUtil","getP2PInboxTopic","getP2PTopicSubscription","sessionEventCBFunction","UP_NOTICE","REJECTED_MESSAGE_ERROR","PROPERTY_UPDATE_OK","PROPERTY_UPDATE_ERROR","CAN_ACCEPT_DATA","DISCONNECTED","RECONNECTING_NOTICE","RECONNECTED_NOTICE","REPUBLISHING_UNACKED_MESSAGES","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","GUARANTEED_MESSAGE_PUBLISHER_DOWN","CONNECT_TIMEOUT","CONNECT_WAIT_TIMEOUT","DOWNGRADE_TIMEOUT","TRANSPORT_UP","TRANSPORT_DESTROYED","TRANSPORT_CAN_ACCEPT_DATA","TRANSPORT_PARSE_ERROR","TRANSPORT_PROTOCOL_SMP","TRANSPORT_PROTOCOL_CLIENTCTRL","EXCEPTION","SUBSCRIBE_TIMEOUT","CREATE_SUBSCRIBER","SEND_ERROR","FLOWS_DISCONNECTED","TRANSPORT_FLUSHED","DNS_RESOLUTION_COMPLETE","TRANSPORT_CHANGE_DONE","buildType","Superclass","superclassArgs","sessionEventCode","_sessionEventCode","errorSubCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","rc","ck","TYPE_CACHE","build","SessionFSMEvent","fields","eventText","eventReason","smfMsg","sessionId","guaranteedFlowObject","ConsumerLib","PublisherLib","TransportLib","SessionRequestType","SessionStateName","StatsByMode","SubscriptionUpdateTimeoutMessages","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","SessionFSM","stats","_sessionProperties","_sessionStatistics","_hosts","_consumers","_flowInterfaceFactory","send","enqueueOutstandingCorrelatedReq","_userBackpressured","clearCurrentError","SessionDisconnected","sEvent","disposeInternal","SessionConnecting","CONNECTING","handleTransportDestroyed","clearConnectTimer","_currentHost","_connectWaitTimer","WaitingForInterConnectTimeout","WaitingForTransport","setConnectTimer","_connectFailEvent","_connectSuccessEvent","DestroyingTransport","_reconnectRetries","_currentError","emitSessionEvent","setCurrentError","WaitingForDNS","sessionEvent","errEvent","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","_transport","sendClientCtrlLogin","WaitingForLogin","WAITING_FOR_LOGIN","setClientCtrlTimer","clientCtrlMsg","getResponse","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","rawSubcode","responseString","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","updateTransportCompression","newTransport","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","subscriptionStr","encodedUtf8Subscription","DestroyTransport","canConnectPublisher","_defaultPublisher","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","canConnectConsumer","sendConsumerSessionUpEvent","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","isGathering","adaptedListenForDestroy","installfn","downEvents","known","pending","onFlowDown","checkPendingFlows","proceed","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","addToSubscriptionCache","_subscriptionCache","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","_correlatedReqs","req","_clientCtrlTimer","_connectTimer","_keepAliveTimer","resetKeepAliveCounter","noLocalSupported","caps","getRouterCapabilities","_compressedTLS","checkSessionDestinationCapability","_subscriptionCacheKeys","p2pTopic","p2pInboxBase","createMessagePublisher","publisherProperties","isAD","createMessageConsumer","createQueueBrowser","destroy","_smfClient","operations","_kaStats","removeFromSubscriptionCache","operationKey","sendEvent","reqTimeoutCb","reqTimeout","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","flush","nextCorrelationTag","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","pm_corrtag","updateRxStats","cancelledRequest","RX_REPLY_MSG_DISCARD","handleADTrMessage","pm_ad_flowid","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","replace","handleSMFMessage","discardMessage","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","request","confirm","handleSubscriptionTimeout","handleTransportEvent","transportEvent","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","GuaranteedFlowControlledRelief","PARSE_FAILURE","TSESSION","messageType","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","deliveryMode","adLocallyDisabled","_gmSendDisallowed","requestConfirmation","topicDestination","sendSubscribe","sub","keepAliveIntervalInMsecs","statTarget","forceAllowEnqueue","content","encodeCompoundMessage","updateTxStats","compressionLevel","match","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","getUpdate","transportDowngradeTimeoutInMsecs","subscriptionUpdate","subject","requestType","default","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","TX_REQUEST_SENT","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","updateCapabilities","gmCap","_getCapability","oldName","newName","severTls","startCompression","SessionOperation","CTRL","SEND","QUERY_OPERATION","SessionPropertiesLib","valArrayIsMember","valArrayOfString","valLength","valNotEmpty","valString","valStringOrArray","ALLOWED_PROTOCOLS","valClientName","validateClientName","enumInstance","allowNull","valSslExcludedProtocols","supported","SUPPORTED_SSL_PROTOCOLS","protocol","prtcl","valSslCipherSuites","string","empty","ciphers","SUPPORTED_CIPHER_SUITES","cipher","valSslTrustedCommonNameList","valUrlList","valArray","included","validatePropsSupportedByTransport","transportProtocol","nonHttpPropsSet","HTTP_BINARY_STREAMING","HTTP_BINARY","HTTP_BASE64","isHttpTransport","propNames","useSsl","regex","arrayLength","currententry","matchUrl","SessionPropertiesValidator","webTransportProtocolList","useClientCert","authenticationScheme","equal","idToken","accessToken","WS_BINARY","sslValidateCertificate","sslPfxSet","sslPfx","sslPrivateKeySet","sslPrivateKey","sslCertSet","sslCertificate","nonHTTPTransportPropsSet","recommendedMin","defaultConnectTimeoutInMsecs","connectTimeout","NodeSslConstants","DEFAULT_CIPHER_SUITES","SessionPropertiesBase","_tpProtocol","_transportProtocolList","_tpDowngradeTimeout","transportProtocolInUse","_tpProtocolInUse","_setTransportProtocolInUse","webTransportProtocolInUse","_setWebTransportProtocolInUse","transportContentType","_tpContentType","sslExcludedProtocols","_sslExcludedProtocols","sslCipherSuites","_sslCipherSuites","_sslValidateCert","env","NODE_TLS_REJECT_UNAUTHORIZED","sslTrustStores","_sslTrustStores","sslTrustedCommonNameList","_sslTrustedCNList","_sslPfx","sslPfxPassword","_sslPfxPasswd","_sslPrivateKey","sslPrivateKeyPassword","_sslPrivateKeyPasswd","_sslCertificate","sslProtocol","_sslProtocol","_compressionLevel","_sslConnectionDowngradeTo","_lendsInspect","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_publisherProperties","makeDefaults","_authScheme","_accessToken","_idToken","issuerIdentifier","_issuerIdentifier","_url","password","_password","userName","_userName","clientName","_clientName","applicationDescription","_appDesc","vpnName","_vpnName","vpnNameInUse","_connectTimeout","transportCount","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","generateSendTimestamps","_genSendTimestamps","generateReceiveTimestamps","_genReceiveTimestamps","includeSenderId","_includeSenderId","generateSequenceNumber","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","p2pInboxInUse","userIdentification","_setUserIdentification","subscriberLocalPriority","_subLocalPriority","subscriberNetworkPriority","_subNetworkPriority","ignoreDuplicateSubscriptionError","_ignoreDupSubError","ignoreSubscriptionNotFoundError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","sendBufferMaxSize","_sendBufferMaxSize","_assumedMaxAdSize","maxWebPayload","_maxWebPayload","SslProtocolExcludeConstantMap","REMOVE_P2PINBOX","SESSION_ERROR","TRANSPORT_FAIL","CONNECTED","MessageLib","CACHE_REQUEST_PREFIX","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","selectedProtocol","defaultList","transportProtocolDefaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","invalid","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","stateName","subscribe","isBooleanOrNothing","isRangeCompareOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","createFromSpec","handleDTEUnsubscribeResponse","updateProperty","respMsg","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","smpResp","resp","afterRemoveCallback","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","getSessionProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","getSessionState","getTransportProtocol","capabilityType","isNumber","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","browserProperties","destinationType","vrn","localName","operationEnum","allow","anything","NEW","routerCapabilities","sendDest","senderTimestamp","noSenderTimestamp","now","sequenceNumber","noSequenceNumber","senderId","noSenderId","reqFailedCb","replyRecvdCb","none","TX_REQUEST_TIMEOUT","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","dataMessage","RX_REPLY_MSG_RECVED","requestConfirm","adCtrlMessage","getEventCBInfo","setEventCBInfo","eventCBInfo","getMessageCBInfo","setMessageCBInfo","messageCBInfo","rfu","buildErrorEvent","object","CodecLib","BinaryMetaBlock","SMFAdProtocolParam","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","SMFSMPMessageType","SMFSMPMessageTypeFlags","SMFTransportSessionMessageType","SMFParameter","setBits","encAdp0Param","uh","paramtype","byte1","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","RSValueLenMap","encAdpReplayParam","valType","valObj","encAdp64AckPairParam","encAdpUTF8NTParam","byte2","parseAdpAt","adpVersion","twobyte","paramUH","paramType","paramValueLen","paramLen","smfParam","addParameter","encAdp","paramspace","paramarray","getParameterArray","param","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","getUh","EP_BEHAVIOUR","PARTITION_GROUP_ID","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","APPLICATION_PUB_ACK","paramdata","version","threebytes","padBytes","twobytes","ContentSummaryType","ParamParse","ParseSMF","parseCCAt","payloadLen","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","ContentSummaryElement","position","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","SolclientDestinationLib","SolclientMessageLib","SolclientSDTLib","PriorityUserCosMap","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","payload","preambleByte0","preambleByte1","h","headerMap","ci","mi","mt","rt","si","sn","ts","payloadPosition","headerLength","payloadLength","stream","smf_dto","smf_elidingEligible","smf_deadMessageQueueEligible","smf_priority","pm_msg_priority","pm_userdata","pm_ad_redelflag","pm_ad_flowredelflag","pm_ad_msgid","pm_ad_prevmsgid","pm_ad_publisherid","pm_ad_publishermsgid","pm_ad_topicSequenceNumber","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","pm_ad_replication_mate_ack_message_id","pm_ad_local_spooler_message_id","pm_ad_ttl","payloadOffset","cs","pm_content_summary","currentChunk","chunkBegin","chunkEnd","fromEncodedSmf","adaptSmfToMessage","SMFHeader","base64Encode","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","encodedSdtPayload","sdtPreamble","sdtStreamContainer","adaptMessageToBinaryMeta","binaryMetaSMF","asEncodedSmf","MAX_24BITS","adaptMessageToSmf","smfHeaderIn","payloadBytes","adaptMessageToSmf_payloadFinalize","pm_ad_publishermsgId","pm_ad_ackimm","pm_queue_len","pm_queue_offset","userData","adaptMessageToSmf_nonPayload","maskValues","bitRange","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_uh","smf_ttl","params","TR_TOPICNAME","LIGHT_QUEUE_NAME_OFFSET","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","setPayloadSize","SMFUH","delModeEnumBidiMap","lutDelModeToEnum","lutEnumToDelMode","uhTypeMap","paramTypeCount","lenMap","idx","lightMap","lenCount","ContentSummaryDecodeMap","delmode","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","cst","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","firstByte","lengthModeMap","lengthMode","lengthString","base64Decode","isSMFHeaderAvailable","isSMFHeaderValid","parseSMFExtendedStream","streamLen","pUH","AD_REDELIVERY_COUNT","AD_SPOOLER_UNIQUE_ID","AD_ACK_MESSAGE_ID","AD_REPL_MATE_ACK_MSGID","isSMFAvailable","remaining","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parseTopicQueueOffsets","parsedTopicOffsets","pStart","pType","pValueLen","pLen","pm_ad_publisher_id","parsedResponse","parseResponseParam","SUB_ID_LIST","GENERIC_ATTACHMENT","parseDeliveryMode","AD_TOPICSEQUENCE_NUMBER","contentSummary","parseContentSummary","AD_FLOWREDELIVERED_FLAG","ADDSUBSCRIPTION","REMSUBSCRIPTION","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","msgFlags","smpFlags","queueLength","encodedUtf8QueueName","subsLength","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","CREATE_RESP","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","BaseMessage","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","IGNORE","_readParameter","decoder","bufMethod","getParameter","getBuffer","getBegin","masked","ENDPOINT_ID","GRANTED_PERMISSIONS","getLastMsgIdReceived","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","REJECT","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","endpointBytes","endpointType","rsValue","multiply","UNSUBSCRIBE","lastMessageIdAcked","applicationAckRanges","_parameters","bufSmf","chunkCount","fourbyte","SMFClientCtrlAuthType","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","dto","local","network","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","capLen","sprop","compressedTLS","plaintextTLS","cc","isClientCert","DELIVERTOONEPRIORITY","prmGetDtoPriorityValue","CLIENTDESC","AUTHENTICATION_SCHEME","CLIENTNAME","mode","formattedDate","SSL_DOWNGRADE","clientCaps","clientCapList","highestCap","capBits","cap","clientCapsToStr","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","appdesc","strName","encodeResult","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","begin","_uh","_begin","getEnd","SMF_SMP_FLAG_TOPIC","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","smp","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_PERSIST","TRANSACTIONCTRL","XACTRL","TRANSPORT_PRIORITY","LINGER_OPTION","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","PADDING","PARTITION_KEY_HASH","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_DELIVERALWAYS","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","DESTROY","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","CacheContext","CacheRequest","cacheCBFunction","getCallback","getUserObject","cacheRequestCorrelationId","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","FULFILL","FLOW_THRU","_returnCode","_subcode","_topic","getReturnCode","getReturnSubcode","getTopic","getError","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","cacheSession","cacheMessageType","requestID","cbInfo","liveDataAction","cacheName","subscriptionWaiting","replyReceived","dataReceived","correlationID","childRequests","parentRequest","queuedLiveData","liveDataFulfilled","timeoutHandle","getRootRequest","addChild","childIn","child","removeChild","childIndex","collapse","clearRequestTimeout","getRequestID","getCBInfo","getLiveDataAction","startRequestTimeout","cacheSessionTimeoutCB","timeoutMsec","VERSION","DEFAULT_REPLY_SIZE_LIMIT","REPLY_SIZE_LIMIT","FAIL","INCOMPLETE","REQUEST_COMPLETE","LIVE_DATA_FULFILL","ERROR_RESPONSE","INVALID_SESSION","REQUEST_ALREADY_IN_PROGRESS","NO_DATA","SUSPECT_DATA","CACHE_SESSION_DISPOSED","maxAgeSec","maxMessages","includeOtherClusters","cachePrefix","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","CacheSessionSubscribeInfo","SessionLib","noOp","privateInterface","_validateProps","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","_handleMessage","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","_getOutstandingRequest","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","_startCacheRequest","_terminateRequest","_checkRequestCompletion","parent","_unregisterRequest","_sendSeeOther","cacheGetResult","clusterName","childRequest","_registerRequest","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","streamField","_incStat","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","_decodeMessageStream","RX_CACHE_MSG","exception","checkCID","_performLiveDataAction","_fulfillRequest","_trackCompletionStats","_notifyCallback","sendCacheRequest","arguments","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","suppressClusters","round","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","innerMessage","cacheRequest","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_PERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","RX_DIRECT_MSGS","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_MSGS","RX_DIRECT_BYTES","RX_PERSISTENT_BYTES","RX_NONPERSISTENT_BYTES","TX_WINDOW_CLOSE","_parent","_statsMap","TransportSessionStates","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","concatFrom","allocUnsafe","buf0","copy","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","BufferQueue","maxSize","_queue","_maxSize","peekView","oIndex","put","adaptData","advance","done","chunk","logPeekBuffer","bufPair","_incomingBuffer","rxDataString","_rxDataCB","rxDataArrayBuffer","rxDataBuffer","putSuccess","messageLen","msgBuffer","_sessionId","fs","SolclientSessionLib","NodeTLSOptsMixin","checkCertificateCNs","cert","_props","valid","cn","createTLSOptions","constMap","trimmed","tsContents","tsFile","readFileSync","navigator","appVersion","CompressedTransport","TcpRawTransport","TcpTlsTransport","TlsOnlyTransport","Duplex","ShuntableTransport","_shunted","_dontEnd","_underlyingTransport","underlyingTransport","_interimBuffer","_transportDrained","_connected","shunt","dontEnd","_write","INVALID_STATE_FOR_OPERATION","_read","unpause","pause","eventCB","onConnect","onError","onClose","onDrain","resendBuffer","forceFailure","setNoDelay","arg","shunted","zlib","TransportBase","TransportSessionEvent","TransportSessionState","client","_clientstats","_waitForSocketDrain","_waitForCompressorDrain","_flushCallback","_socketDrained","_compressorDrained","_state","_socketError","_transportSession","_compressor","_decompressor","setClientStats","setUnderlyingTransport","newUnderlyingTransoprt","WAITING_FOR_DESTROY","write","onData","_client","Z_SYNC_FLUSH","_eventCB","onZlibError","_destroy","CONNECTION_FAILED","stage2destroy","onOpen","WAITING_FOR_CREATE","highWaterMark","createDeflateRaw","createInflateRaw","sendCompressed","onCompressorDrain","onerrorStub","unpipe","_hadError","close","resume","prevCallback","net","TransportClientStats","_canSendNeeded","_drained","_rawSocket","rehome","parseHostPort","urlString","port","urlParsed","_ssl","originalSocket","hadError","errorMsg","Socket","bufferSize","tls","_tlsSocket","tlsOptions","socket","getUnderlyingTransport","_shuntableTransport","duplexOptions","tlsShutdown","tlsShutdownStage2","transportProps","immediate","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","WebTransportCapabilities","WebTransport","getId","compressingLayer","plaintextTransport","tlsLayer","uncompressedTransport","encryptedTransport","compress","precallback","WebTransportsLib","lutTransportProtocols","StateBase64","StateBinary","StateStreamingAndBinary","StateWebSocketBinary","TransportProtocolHandler","useSSL","transport","downgradeTransport","TransportConstructor","switchState","onEnter","completeDowngrade","canCompleteDowngrade","getNextState","newState","DOWNGRADE_FAILED","DOWNGRADE_SUCCEEDED","tsEventCode","_transportEventCode","_sid","transportEventCode","getResponseCode","TSHState","tpProtocol","exitCallback","nextState","_transportProtocol","_exitCallback","_nextState","_unsupportedRuntimeMessage","userAgent","setNextState","getUseSsl","validateLegal","HTTPLib","HTTPConnection","HTTPTransportSession","sendXhrBinary","sendXhrText","TimingBucket","XHRFactory","prependOrigin","location","origin","WaitedToken","HadToken","ReturnedToken","bucketCount","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","browserSupportsXhrBinary","recStat","attempt","maxRetry","abort","open","onreadystatechange","xhrStateChange","sentdata","readyState","RS_LOADING","LOADING","RS_DONE","DONE","status","responseType","responseText","decodedData","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","xhr","check","onprogress","WebTransportSessionBase","PacketReadState","baseUrl","_haveToken","_confMaxWebPayload","_maxPayloadBytes","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_packetReadState","agent","_contentType","connectTimerExpiry","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","connectInternal","_connError","_createConn","handleCreateConnFailure","createMsg","createConnectTimeout","connError","cancelConnectTimeout","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","_queuedData","enqueueData","remainder","allowEnqueue","enqueueFailNoSpace","transportPacketLen","_smfDataTSHeaderParts","_queuedDataSize","initPreformattedHeaders","sendQueuedData","getQueuedDataToSend","tsRc","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","handleRxError","errorInfo","asyncSendEvent","finalize","sendXhrBinaryMSIE10","overrideMimeType","setRequestHeader","sendXhrBinaryXHR2","connClose","allowFail","XMLHttpRequest","exitCb","xhrBinary","streaming","WebSocketTransportSession","browserSupportsBinaryWebSockets","browserSupportsStreamingResponse","WebTransportEvent","DOWNGRADE","WebTransportState","WebTransportFSM","transportIn","WebTransportDown","wEvent","WebTransportConnecting","destroyInternal","_destroyMsg","WebTransportDestroying","getConnError","_eventReason","notifyEvent","_transportEvent","attemptDowngrade","WebTransportUp","WebTransportDowngrading","DOWNGRADING","notifyDowngradeFailed","_downgradeMsg","DESTROYING","tsEvent","bytesAllowed","getBufferedAmount","elemLength","_transportHandler","_webTransportFsm","handleDestroyed","_lastDowngradeSucceeded","_socket","_sender","WebSocketCloseCodes","http","https","MyWebSocket","WebSocket","createWebSocketOptions","onDrainCallback","Agent","keepAlive","wsAgent","origCreateConnection","createConnection","opts","adaptURL","msgBuf","wasClean","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","WAITING_FOR_CONNECT","onMessage","_socketOptions","ondrain","binaryType","onopen","onmessage","onclose","onerror","force","bufferAllow","maxPayloadBytes","validator","typeInstance","typeInstanceDesc","boolean","allowUndefined","allowEmpty","allowDuplicate","ele","typedesc","cloneObj","acc","_instanceof","nativeMap","nativeSet","nativePromise","depth","allParents","allChildren","useBuffer","_clone","proto","reject","__isArray","__isRegExp","RegExp","__getRegExpFlags","__isDate","getPrototypeOf","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","allPropertyNames","propertyName","__objToStr","regExpOptions","ignoreCase","multiline","clonePrototype","emptyCloneFunc","NODE_OS_TYPES","Darwin","Windows_NT","NODE_PROCESS","os","ostype","osname","nodeVersionStr","release","arch","LUT_PRINTABLE","padLeftRight","minLen","padSide","padChar","leastSpaces","spaces","capitalizeWord","isEmptyFun","hexdump","printable","spacer","linelen","sLength","heredoc","literals","substitutions","subst","buckets","normalized","cont","MODE","FORMATTED_DATE","pad","SUMMARY","BaseChecks","instanceOfAny","types","truthy","fn","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","rangeCompare","operator","operand","epsilon","expected","member","function","orNull","orUndefined","orNothing","thenGen","doOp","elseFn","when","condition","unless","NO_OBJ","subcodeSummary","got","expectedStr","gotStr","validatorArgs","validateError","typename","memberOfEnum","isMember","memberOf","objectValues","isNumberOrNull","isRangeCompare","isStringOrNull","createWebSocketStream","Server","Receiver","Sender","WebSocketServer","EMPTY_BUFFER","FastBuffer","Symbol","species","_mask","mask","_unmask","totalLength","toArrayBuffer","toBuffer","readOnly","isView","unmask","WS_NO_BUFFER_UTIL","bufferUtil","BINARY_TYPES","alloc","GUID","kForOnEventAttribute","kListener","kStatusCode","kWebSocket","NOOP","kCode","kData","kError","kMessage","kReason","kTarget","kType","kWasClean","Event","CloseEvent","ErrorEvent","MessageEvent","EventTarget","addEventListener","handler","listeners","wrapper","isBinary","callListener","_closeFrameReceived","_closeFrameSent","removeEventListener","thisArg","tokenChars","format","configurations","offers","extensionName","paramName","mustUnescape","isEscaping","inQuotes","SyntaxError","token","kDone","kRun","concurrency","jobs","job","Limiter","TRAILER","kPerMessageDeflate","kTotalLength","kCallback","kBuffers","zlibLimiter","deflateOnData","inflateOnData","_maxPayload","RangeError","inflateOnError","_inflate","isServer","maxPayload","_options","_threshold","threshold","_isServer","_deflate","concurrencyLimit","offer","serverNoContextTakeover","server_no_context_takeover","clientNoContextTakeover","client_no_context_takeover","serverMaxWindowBits","server_max_window_bits","clientMaxWindowBits","client_max_window_bits","accept","normalizeParams","acceptAsServer","acceptAsClient","cleanup","accepted","num","isInteger","TypeError","decompress","fin","_decompress","_compress","windowBits","Z_DEFAULT_WINDOWBITS","zlibInflateOptions","_readableState","endEmitted","zlibDeflateOptions","Writable","PerMessageDeflate","isValidStatusCode","isValidUTF8","ErrorCtor","statusCode","errorCode","_binaryType","_extensions","_skipUTF8Validation","skipUTF8Validation","_bufferedBytes","_buffers","_compressed","_payloadLength","_fragmented","_masked","_fin","_opcode","_totalPayloadLength","_messageLength","_fragments","_loop","startLoop","consume","dst","getInfo","getPayloadLength16","getPayloadLength64","getMask","getData","compressed","haveLength","controlMessage","er","fragments","randomFillSync","applyMask","kByteLength","maskBuffer","generateMask","_generateMask","_maskBuffer","_firstFragment","_deflating","merge","skipMasking","opcode","rsv1","writeUInt16BE","writeUIntBE","enqueue","sendFrame","frame","ping","pong","perMessageDeflate","binary","destroyed","dequeue","Reflect","cork","uncork","emitClose","duplexOnEnd","_writableState","finished","duplexOnError","ws","terminateOnDestroy","duplex","autoDestroy","objectMode","writableObjectMode","CLOSED","nextTick","called","_final","isPaused","protocols","isUtf8","_isValidUTF8","WS_NO_UTF_8_VALIDATE","createHash","subprotocol","keyRegex","server","socketOnError","abortHandshake","headers","STATUS_CODES","Connection","abortHandshakeOrEmitwsClientError","handleProtocols","clientTracking","verifyClient","noServer","backlog","_server","createServer","res","body","writeHead","listen","emitConnection","_removeListeners","addListeners","listening","upgrade","head","handleUpgrade","clients","_shouldEmitClose","shouldHandle","method","secWebSocketProtocol","secWebSocketExtensions","secure","authorized","encrypted","verified","completeUpgrade","readable","update","digest","_protocol","setSocket","randomBytes","Readable","URL","kAborted","protocolVersions","readyStates","subprotocolRegex","_closeCode","_closeMessage","_closeTimer","_paused","_readyState","_receiver","_bufferedAmount","_redirects","initAsClient","bufferedAmount","receiver","receiverOnConclude","receiverOnDrain","receiverOnError","receiverOnMessage","receiverOnPing","receiverOnPong","unshift","socketOnClose","socketOnData","socketOnEnd","OPEN","CLOSING","errorEmitted","_req","sendAfterClose","needDrain","websocket","protocolVersion","followRedirects","maxRedirects","socketPath","parsedUrl","isSecure","isIpcUrl","invalidUrlMessage","pathname","hash","emitErrorAndClose","defaultPort","protocolSet","tlsConnect","netConnect","Upgrade","search","handshakeTimeout","Origin","username","auth","parts","_originalIpc","_originalSecure","_originalHostOrSocketPath","entries","isSameHost","authorization","cookie","addr","serverProt","protError","extensionNames","finishRequest","servername","isIP","setHeader","receiverOnFinish","read","property","require","wasm","WebAssembly","Instance","Module","unsigned","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","mul","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","ceil","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","hi","lo","fromBytes","fromBytesLE","fromBytesBE","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}